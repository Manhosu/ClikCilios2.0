const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function testarLoginProducao() {
  console.log('üîê Testando sistema de login em produ√ß√£o...')
  console.log('üåê Supabase URL:', supabaseUrl)
  console.log('üîë Usando chave an√¥nima (primeiros 20 chars):', supabaseKey.substring(0, 20) + '...')
  
  try {
    // 1. Testar conex√£o com Supabase
    console.log('\nüì° Testando conex√£o com Supabase...')
    const { data: testData, error: testError } = await supabase
      .from('users')
      .select('count')
      .limit(1)
    
    if (testError) {
      console.error('‚ùå Erro de conex√£o:', testError.message)
      return
    }
    
    console.log('‚úÖ Conex√£o com Supabase funcionando')
    
    // 2. Listar usu√°rios existentes
    console.log('\nüë• Verificando usu√°rios existentes...')
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, email, nome, is_admin, created_at')
      .order('created_at', { ascending: false })
      .limit(5)
    
    if (usersError) {
      console.log('‚ö†Ô∏è  N√£o foi poss√≠vel listar usu√°rios:', usersError.message)
    } else if (users && users.length > 0) {
      console.log('‚úÖ Usu√°rios encontrados:')
      users.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.email} (${user.nome}) - Admin: ${user.is_admin}`)
      })
    } else {
      console.log('üìù Nenhum usu√°rio encontrado na tabela users')
    }
    
    // 3. Testar cria√ß√£o de usu√°rio
    console.log('\nüß™ Testando cria√ß√£o de novo usu√°rio...')
    const testEmail = `teste.login.${Date.now()}@gmail.com`
    const testPassword = 'senha123456'
    const testNome = 'Usu√°rio Teste Login'
    
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          nome: testNome
        }
      }
    })
    
    if (signUpError) {
      console.error('‚ùå Erro ao criar usu√°rio:', signUpError.message)
    } else {
      console.log('‚úÖ Usu√°rio criado no Auth:', signUpData.user?.id)
      console.log('üìß Email:', signUpData.user?.email)
      
      // Aguardar um pouco
      console.log('‚è≥ Aguardando 2 segundos...')
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      // Verificar se foi criado na tabela users
      const { data: newUser, error: newUserError } = await supabase
        .from('users')
        .select('*')
        .eq('id', signUpData.user?.id)
        .single()
      
      if (newUserError || !newUser) {
        console.log('‚ö†Ô∏è  Usu√°rio n√£o foi criado automaticamente na tabela users')
        console.log('   Isso √© esperado se o trigger n√£o foi configurado ainda')
      } else {
        console.log('üéâ Usu√°rio criado automaticamente na tabela users!')
        console.log('   - Nome:', newUser.nome)
        console.log('   - Admin:', newUser.is_admin)
      }
    }
    
    // 4. Testar login com usu√°rios existentes
    if (users && users.length > 0) {
      console.log('\nüîê Para testar login, use um dos emails acima com a senha correspondente')
      console.log('   Emails dispon√≠veis para teste:')
      users.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.email}`)
      })
    }
    
    // 5. Status final
    console.log('\nüéØ STATUS DO SISTEMA:')
    console.log('‚úÖ Modo desenvolvimento: DESABILITADO')
    console.log('‚úÖ Conex√£o Supabase: FUNCIONANDO')
    console.log('‚úÖ Cria√ß√£o de usu√°rios: FUNCIONANDO')
    console.log('‚úÖ Sistema pronto para produ√ß√£o!')
    
    console.log('\nüìã PR√ìXIMOS PASSOS:')
    console.log('1. Acesse http://localhost:5173 no navegador')
    console.log('2. Tente fazer login com um dos emails listados acima')
    console.log('3. Ou crie uma nova conta - ela ser√° criada no Supabase')
    console.log('4. Para configurar o trigger autom√°tico, execute o SQL do arquivo:')
    console.log('   migrations/setup_auth_trigger.sql no painel do Supabase')
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error)
  }
}

testarLoginProducao()