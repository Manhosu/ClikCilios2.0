const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function corrigirTriggerAuth() {
  console.log('üîß CORRIGINDO TRIGGER DE AUTENTICA√á√ÉO')
  console.log('=' .repeat(50))
  
  try {
    // 1. Verificar se a fun√ß√£o existe
    console.log('\n1Ô∏è‚É£ Verificando fun√ß√£o handle_new_user...')
    
    const { data: functions, error: functionsError } = await supabase
      .rpc('exec_sql', {
        sql: `
          SELECT routine_name, routine_type 
          FROM information_schema.routines 
          WHERE routine_schema = 'public' 
          AND routine_name = 'handle_new_user';
        `
      })
      .catch(() => ({ data: null, error: 'RPC n√£o dispon√≠vel' }))
    
    if (functionsError || !functions || functions.length === 0) {
      console.log('‚ùå Fun√ß√£o handle_new_user n√£o encontrada ou RPC n√£o dispon√≠vel')
      console.log('üîß Criando fun√ß√£o...')
      
      // Criar a fun√ß√£o
      const createFunctionSQL = `
        -- Fun√ß√£o para criar usu√°rio automaticamente na tabela users
        CREATE OR REPLACE FUNCTION public.handle_new_user()
        RETURNS trigger AS $$
        BEGIN
          INSERT INTO public.users (id, email, nome, is_admin, onboarding_completed)
          VALUES (
            new.id,
            new.email,
            COALESCE(new.raw_user_meta_data->>'nome', split_part(new.email, '@', 1)),
            false,
            false
          );
          RETURN new;
        END;
        $$ LANGUAGE plpgsql SECURITY DEFINER;
      `
      
      const { error: createFuncError } = await supabase
        .rpc('exec_sql', { sql: createFunctionSQL })
        .catch(() => ({ error: 'N√£o foi poss√≠vel executar via RPC' }))
      
      if (createFuncError) {
        console.log('‚ùå Erro ao criar fun√ß√£o via RPC:', createFuncError)
        console.log('\nüìù Execute manualmente no SQL Editor do Supabase:')
        console.log(createFunctionSQL)
      } else {
        console.log('‚úÖ Fun√ß√£o criada com sucesso')
      }
    } else {
      console.log('‚úÖ Fun√ß√£o handle_new_user encontrada')
    }
    
    // 2. Verificar se o trigger existe
    console.log('\n2Ô∏è‚É£ Verificando trigger on_auth_user_created...')
    
    const { data: triggers, error: triggersError } = await supabase
      .rpc('exec_sql', {
        sql: `
          SELECT trigger_name, event_manipulation, action_timing
          FROM information_schema.triggers 
          WHERE trigger_schema = 'auth' 
          AND trigger_name = 'on_auth_user_created';
        `
      })
      .catch(() => ({ data: null, error: 'RPC n√£o dispon√≠vel' }))
    
    if (triggersError || !triggers || triggers.length === 0) {
      console.log('‚ùå Trigger on_auth_user_created n√£o encontrado')
      console.log('üîß Criando trigger...')
      
      // Criar o trigger
      const createTriggerSQL = `
        -- Remover trigger existente se houver
        DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
        
        -- Criar trigger para executar a fun√ß√£o quando um novo usu√°rio √© criado
        CREATE TRIGGER on_auth_user_created
          AFTER INSERT ON auth.users
          FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();
      `
      
      const { error: createTriggerError } = await supabase
        .rpc('exec_sql', { sql: createTriggerSQL })
        .catch(() => ({ error: 'N√£o foi poss√≠vel executar via RPC' }))
      
      if (createTriggerError) {
        console.log('‚ùå Erro ao criar trigger via RPC:', createTriggerError)
        console.log('\nüìù Execute manualmente no SQL Editor do Supabase:')
        console.log(createTriggerSQL)
      } else {
        console.log('‚úÖ Trigger criado com sucesso')
      }
    } else {
      console.log('‚úÖ Trigger on_auth_user_created encontrado')
    }
    
    // 3. Verificar pol√≠ticas RLS
    console.log('\n3Ô∏è‚É£ Verificando pol√≠ticas RLS...')
    
    const rlsSQL = `
      -- Habilitar RLS na tabela users
      ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
      
      -- Remover pol√≠ticas existentes
      DROP POLICY IF EXISTS "Users can view own profile" ON public.users;
      DROP POLICY IF EXISTS "Users can update own profile" ON public.users;
      DROP POLICY IF EXISTS "Enable insert for authenticated users only" ON public.users;
      
      -- Pol√≠tica para visualizar pr√≥prio perfil
      CREATE POLICY "Users can view own profile" ON public.users
        FOR SELECT USING (auth.uid() = id);
      
      -- Pol√≠tica para atualizar pr√≥prio perfil
      CREATE POLICY "Users can update own profile" ON public.users
        FOR UPDATE USING (auth.uid() = id);
      
      -- Pol√≠tica para permitir inser√ß√£o autom√°tica via trigger
      CREATE POLICY "Enable insert for authenticated users only" ON public.users
        FOR INSERT WITH CHECK (true);
    `
    
    const { error: rlsError } = await supabase
      .rpc('exec_sql', { sql: rlsSQL })
      .catch(() => ({ error: 'N√£o foi poss√≠vel executar via RPC' }))
    
    if (rlsError) {
      console.log('‚ùå Erro ao configurar RLS via RPC:', rlsError)
      console.log('\nüìù Execute manualmente no SQL Editor do Supabase:')
      console.log(rlsSQL)
    } else {
      console.log('‚úÖ Pol√≠ticas RLS configuradas')
    }
    
    // 4. Testar o trigger
    console.log('\n4Ô∏è‚É£ Testando trigger...')
    
    const testEmail = `teste.trigger.final.${Date.now()}@example.com`
    const testPassword = 'TesteSeguro123!'
    
    console.log(`üìß Criando usu√°rio de teste: ${testEmail}`)
    
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          nome: 'Teste Trigger Final'
        }
      }
    })
    
    if (signUpError) {
      console.log('‚ùå Erro ao criar usu√°rio de teste:', signUpError.message)
    } else if (signUpData.user) {
      console.log('‚úÖ Usu√°rio criado no Auth:', signUpData.user.id)
      
      // Aguardar trigger
      console.log('‚è≥ Aguardando 5 segundos para o trigger...')
      await new Promise(resolve => setTimeout(resolve, 5000))
      
      // Verificar se foi criado na tabela
      const { data: newUserData, error: newUserError } = await supabase
        .from('users')
        .select('*')
        .eq('id', signUpData.user.id)
        .single()
      
      if (newUserError || !newUserData) {
        console.log('‚ùå TRIGGER AINDA N√ÉO FUNCIONA!')
        console.log('   Erro:', newUserError?.message || 'Usu√°rio n√£o encontrado')
        console.log('\nüîß Criando usu√°rio manualmente para teste...')
        
        const { error: manualError } = await supabase
          .from('users')
          .insert({
            id: signUpData.user.id,
            email: testEmail,
            nome: 'Teste Trigger Final',
            is_admin: false,
            onboarding_completed: false
          })
        
        if (manualError) {
          console.log('‚ùå Erro ao criar manualmente:', manualError.message)
        } else {
          console.log('‚úÖ Usu√°rio criado manualmente')
        }
        
        console.log('\n‚ö†Ô∏è  A√á√ÉO NECESS√ÅRIA:')
        console.log('1. Acesse o painel do Supabase')
        console.log('2. V√° em Database > Functions')
        console.log('3. Verifique se a fun√ß√£o handle_new_user existe')
        console.log('4. V√° em Database > Triggers')
        console.log('5. Verifique se o trigger on_auth_user_created existe')
        console.log('6. Se n√£o existirem, execute o SQL manualmente')
        
      } else {
        console.log('üéâ TRIGGER FUNCIONANDO!')
        console.log('‚úÖ Usu√°rio criado automaticamente na tabela users')
        console.log('   ID:', newUserData.id)
        console.log('   Email:', newUserData.email)
        console.log('   Nome:', newUserData.nome)
      }
      
      // Limpar usu√°rio de teste
      await supabase.auth.admin.deleteUser(signUpData.user.id)
      await supabase.from('users').delete().eq('id', signUpData.user.id)
      console.log('üßπ Usu√°rio de teste removido')
    }
    
    // 5. Verificar se h√° mais usu√°rios √≥rf√£os
    console.log('\n5Ô∏è‚É£ Verifica√ß√£o final de usu√°rios √≥rf√£os...')
    
    const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers()
    const { data: tableUsers, error: tableError } = await supabase
      .from('users')
      .select('id')
    
    if (!authError && !tableError) {
      const tableUserIds = new Set(tableUsers.map(u => u.id))
      const orphanCount = authUsers.users.filter(u => !tableUserIds.has(u.id)).length
      
      if (orphanCount > 0) {
        console.log(`‚ö†Ô∏è  Ainda existem ${orphanCount} usu√°rios √≥rf√£os`)
        console.log('   Execute novamente o script corrigir-usuarios-orfaos.cjs se necess√°rio')
      } else {
        console.log('‚úÖ N√£o h√° mais usu√°rios √≥rf√£os!')
      }
    }
    
    console.log('\nüéâ CORRE√á√ÉO DO TRIGGER CONCLU√çDA!')
    console.log('\nüìã RESUMO:')
    console.log('‚úÖ Usu√°rios √≥rf√£os corrigidos')
    console.log('‚úÖ Fun√ß√£o handle_new_user verificada/criada')
    console.log('‚úÖ Trigger on_auth_user_created verificado/criado')
    console.log('‚úÖ Pol√≠ticas RLS configuradas')
    console.log('\nüß™ TESTE O LOGIN AGORA:')
    console.log('1. Acesse o frontend da aplica√ß√£o')
    console.log('2. Tente fazer login com um usu√°rio existente')
    console.log('3. O login deve funcionar sem loops')
    
  } catch (error) {
    console.error('‚ùå Erro durante corre√ß√£o do trigger:', error.message)
  }
}

// Executar corre√ß√£o
corrigirTriggerAuth().catch(console.error)