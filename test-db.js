import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://gguxeqpayaangiplggme.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdndXhlcXBheWFhbmdpcGxnZ21lIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0OTg0NjA5NiwiZXhwIjoyMDY1NDIyMDk2fQ.782bdkQ0eiNSqF55VzIyv4kMLoKecXCOq85apB1E7MI';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testDatabase() {
  try {
    console.log('üîç Testando conex√£o com o banco de dados...');
    
    // Verificar usu√°rios
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, email, nome')
      .limit(5);
    
    if (usersError) {
      console.error('‚ùå Erro ao buscar usu√°rios:', usersError);
    } else {
      console.log('‚úÖ Usu√°rios encontrados:', users?.length || 0);
      if (users && users.length > 0) {
        console.log('üìã Primeiros usu√°rios:');
        users.forEach(user => {
          console.log(`  - ${user.email} (${user.nome}) - ID: ${user.id}`);
        });
      }
    }
    
    // Verificar imagens
    const { data: images, error: imagesError } = await supabase
      .from('imagens_clientes')
      .select('id, user_id, nome, tipo')
      .limit(5);
    
    if (imagesError) {
      console.error('‚ùå Erro ao buscar imagens:', imagesError);
    } else {
      console.log('‚úÖ Imagens encontradas:', images?.length || 0);
      if (images && images.length > 0) {
        console.log('üìã Primeiras imagens:');
        images.forEach(image => {
          console.log(`  - ${image.nome} (${image.tipo}) - User: ${image.user_id} - ID: ${image.id}`);
        });
      }
    }
    
    // Se temos usu√°rios, vamos testar a API list-images com um usu√°rio real
    if (users && users.length > 0) {
      const testUser = users[0];
      console.log(`\nüß™ Testando API list-images com usu√°rio: ${testUser.email}`);
      
      // Criar um token JWT v√°lido usando o service role
      try {
        const { data: authData, error: authError } = await supabase.auth.admin.generateLink({
          type: 'magiclink',
          email: testUser.email
        });
        
        if (authError) {
          console.error('‚ùå Erro ao gerar token:', authError);
        } else {
          // Tentar fazer login para obter um token v√°lido
          const { data: sessionData, error: sessionError } = await supabase.auth.signInWithPassword({
            email: testUser.email,
            password: 'temp123' // senha tempor√°ria
          });
          
          if (sessionError) {
            console.log('‚ö†Ô∏è N√£o foi poss√≠vel fazer login (senha n√£o conhecida):', sessionError.message);
            console.log('üìù Vou testar a API diretamente sem token para ver o erro de autentica√ß√£o');
            
            const response = await fetch('http://localhost:3000/api/list-images?page=1&limit=10', {
              method: 'GET',
              headers: {
                'Content-Type': 'application/json'
              }
            });
            
            const result = await response.text();
            console.log('üì° Resposta da API list-images (sem token):', result);
          } else if (sessionData.session) {
            console.log('‚úÖ Token obtido com sucesso');
            
            const response = await fetch('http://localhost:3000/api/list-images?page=1&limit=10', {
              method: 'GET',
              headers: {
                'Authorization': `Bearer ${sessionData.session.access_token}`,
                'Content-Type': 'application/json'
              }
            });
            
            const result = await response.text();
            console.log('üì° Resposta da API list-images (com token):', result);
          }
        }
      } catch (error) {
        console.error('‚ùå Erro ao testar API:', error);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

testDatabase();