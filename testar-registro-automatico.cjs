const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function testarRegistroAutomatico() {
  console.log('üß™ Testando registro autom√°tico com cria√ß√£o manual na tabela users...')
  
  try {
    const testEmail = `teste.automatico.${Date.now()}@gmail.com`
    const testPassword = 'senha123456'
    const testNome = 'Usu√°rio Teste Autom√°tico'
    
    console.log('üìß Criando usu√°rio:', testEmail)
    
    // 1. Criar usu√°rio no Auth
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          nome: testNome
        }
      }
    })
    
    if (signUpError) {
      console.error('‚ùå Erro ao criar usu√°rio no Auth:', signUpError.message)
      return
    }
    
    console.log('‚úÖ Usu√°rio criado no Auth:', signUpData.user?.id)
    
    // 2. Criar usu√°rio na tabela users manualmente
    console.log('üìù Criando perfil na tabela users...')
    
    const { error: insertError } = await supabase
      .from('users')
      .insert({
        id: signUpData.user?.id,
        email: signUpData.user?.email || testEmail,
        nome: testNome,
        is_admin: false,
        onboarding_completed: false
      })
    
    if (insertError) {
      console.error('‚ùå Erro ao criar perfil na tabela users:', insertError.message)
      
      if (insertError.message.includes('row-level security')) {
        console.log('\nüîß SOLU√á√ÉO PARA RLS:')
        console.log('1. Acesse o painel do Supabase')
        console.log('2. V√° em Authentication > Settings')
        console.log('3. Desabilite "Enable email confirmations" temporariamente')
        console.log('4. Ou configure RLS para permitir inser√ß√µes de usu√°rios autenticados')
        console.log('\nüìã SQL para RLS mais permissivo:')
        console.log('DROP POLICY IF EXISTS "Allow authenticated inserts" ON public.users;')
        console.log('CREATE POLICY "Allow authenticated inserts" ON public.users')
        console.log('  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL);')
      }
      return
    }
    
    console.log('‚úÖ Perfil criado na tabela users!')
    
    // 3. Verificar se foi criado corretamente
    console.log('üîç Verificando usu√°rio criado...')
    
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', signUpData.user?.id)
      .single()
    
    if (userError || !userData) {
      console.error('‚ùå Erro ao verificar usu√°rio:', userError?.message)
      return
    }
    
    console.log('üéâ SUCESSO! Usu√°rio completo criado:')
    console.log('   - ID:', userData.id)
    console.log('   - Email:', userData.email)
    console.log('   - Nome:', userData.nome)
    console.log('   - Admin:', userData.is_admin)
    console.log('   - Onboarding:', userData.onboarding_completed)
    
    // 4. Testar login (pode falhar se email n√£o confirmado)
    console.log('\nüîê Testando login...')
    
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: testEmail,
      password: testPassword
    })
    
    if (loginError) {
      if (loginError.message.includes('Email not confirmed')) {
        console.log('‚ö†Ô∏è  Login requer confirma√ß√£o de email (normal em produ√ß√£o)')
        console.log('   Para desenvolvimento, desabilite confirma√ß√£o de email no Supabase')
      } else {
        console.log('‚ö†Ô∏è  Erro no login:', loginError.message)
      }
    } else {
      console.log('‚úÖ Login funcionando!')
      await supabase.auth.signOut()
    }
    
    console.log('\nüéØ RESULTADO FINAL:')
    console.log('‚úÖ Registro autom√°tico: FUNCIONANDO')
    console.log('‚úÖ Cria√ß√£o na tabela users: FUNCIONANDO')
    console.log('‚úÖ Sistema pronto para produ√ß√£o!')
    
    console.log('\nüìã PR√ìXIMOS PASSOS:')
    console.log('1. Teste o sistema em http://localhost:5173')
    console.log('2. Crie uma nova conta e verifique se funciona')
    console.log('3. Configure confirma√ß√£o de email conforme necess√°rio')
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error)
  }
}

testarRegistroAutomatico()