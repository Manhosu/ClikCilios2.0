import { createClient } from '@supabase/supabase-js';
import fetch from 'node-fetch';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://gguxeqpayaangiplggme.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdndXhlcXBheWFhbmdpcGxnZ21lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk4NDYwOTYsImV4cCI6MjA2NTQyMjA5Nn0.WHusG12ZcOYtVSGUQVUT3Vf-MIbu_O6hlc3ha7yVnSE';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testLoginProcess() {
  console.log('üß™ Testando processo de login...');
  
  try {
    // 1. Testar obten√ß√£o da sess√£o inicial
    console.log('\n1. Verificando sess√£o inicial...');
    const { data: session, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('‚ùå Erro ao obter sess√£o:', sessionError.message);
    } else {
      console.log('‚úÖ Sess√£o obtida:', session?.session ? 'Usu√°rio logado' : 'Nenhuma sess√£o ativa');
    }
    
    // 2. Testar login com credenciais inv√°lidas
    console.log('\n2. Testando login com credenciais inv√°lidas...');
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: 'teste@inexistente.com',
      password: 'senhaerrada'
    });
    
    if (loginError) {
      console.log('‚úÖ Erro esperado para credenciais inv√°lidas:', loginError.message);
    } else {
      console.log('‚ö†Ô∏è Login deveria ter falhou mas n√£o falhou');
    }
    
    // 3. Testar verifica√ß√£o de usu√°rio existente
    console.log('\n3. Verificando usu√°rios existentes...');
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, email, nome')
      .limit(3);
    
    if (usersError) {
      console.error('‚ùå Erro ao buscar usu√°rios:', usersError.message);
    } else {
      console.log('‚úÖ Usu√°rios encontrados:', users?.length || 0);
      if (users && users.length > 0) {
        console.log('Primeiro usu√°rio:', users[0]);
      }
    }
    
    // 4. Testar verifica√ß√£o de configura√ß√µes
    console.log('\n4. Testando verifica√ß√£o de configura√ß√µes...');
    if (users && users.length > 0) {
      const userId = users[0].id;
      const { data: config, error: configError } = await supabase
        .from('configuracoes_usuario')
        .select('*')
        .eq('user_id', userId)
        .single();
      
      if (configError && configError.code === 'PGRST116') {
        console.log('‚ö†Ô∏è Configura√ß√µes n√£o encontradas para o usu√°rio (normal para novos usu√°rios)');
      } else if (configError) {
        console.error('‚ùå Erro ao buscar configura√ß√µes:', configError.message);
      } else {
        console.log('‚úÖ Configura√ß√µes encontradas para o usu√°rio');
      }
    }
    
    // 5. Testar verifica√ß√£o de bucket de storage
    console.log('\n5. Testando verifica√ß√£o de storage...');
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error('‚ùå Erro ao listar buckets:', bucketsError.message);
    } else {
      console.log('‚úÖ Buckets encontrados:', buckets?.length || 0);
      const mcpBucket = buckets?.find(b => b.name === 'mcp');
      console.log('Bucket MCP existe:', mcpBucket ? 'Sim' : 'N√£o');
    }
    
    // 6. Testar APIs de autentica√ß√£o
    console.log('\n6. Testando APIs de autentica√ß√£o...');
    
    // Teste sem token
    try {
      const response = await fetch('http://localhost:3001/api/list-images', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      const result = await response.text();
      console.log('API sem token - Status:', response.status, 'Resposta:', result);
    } catch (error) {
      console.error('‚ùå Erro ao testar API:', error.message);
    }
    
    console.log('\n‚úÖ Teste de processo de login conclu√≠do!');
    
  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error.message);
  }
}

// Executar o teste
testLoginProcess();