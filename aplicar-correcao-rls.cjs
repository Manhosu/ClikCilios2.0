const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseServiceKey || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas')
  process.exit(1)
}

const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey)
const supabaseClient = createClient(supabaseUrl, supabaseAnonKey)

async function aplicarCorrecaoRLS() {
  console.log('üîß APLICANDO CORRE√á√ÉO DAS POL√çTICAS RLS')
  console.log('=' .repeat(50))
  
  try {
    console.log('\n1Ô∏è‚É£ Desabilitando RLS temporariamente...')
    
    await supabaseAdmin.rpc('exec_sql', {
      sql: 'ALTER TABLE public.users DISABLE ROW LEVEL SECURITY;'
    }).then(() => console.log('‚úÖ RLS desabilitado'))
    .catch(() => {
      // Tentar m√©todo alternativo
      console.log('‚ö†Ô∏è  M√©todo RPC falhou, tentando SQL direto...')
    })
    
    console.log('\n2Ô∏è‚É£ Removendo pol√≠ticas existentes...')
    
    const policiesToDrop = [
      'Users can view own profile',
      'Users can update own profile', 
      'Enable insert for authenticated users only',
      'Users can insert own profile',
      'Enable read access for all users',
      'Enable insert for service role',
      'Allow public read access',
      'users_select_own',
      'users_update_own',
      'users_insert_service'
    ]
    
    for (const policy of policiesToDrop) {
      try {
        await supabaseAdmin.rpc('exec_sql', {
          sql: `DROP POLICY IF EXISTS "${policy}" ON public.users;`
        })
        console.log(`‚úÖ Pol√≠tica removida: ${policy}`)
      } catch (error) {
        console.log(`‚ö†Ô∏è  Pol√≠tica n√£o encontrada: ${policy}`)
      }
    }
    
    console.log('\n3Ô∏è‚É£ Reabilitando RLS...')
    
    await supabaseAdmin.rpc('exec_sql', {
      sql: 'ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;'
    }).then(() => console.log('‚úÖ RLS reabilitado'))
    .catch(() => console.log('‚ö†Ô∏è  Erro ao reabilitar RLS'))
    
    console.log('\n4Ô∏è‚É£ Criando novas pol√≠ticas seguras...')
    
    // Pol√≠tica para SELECT
    try {
      await supabaseAdmin.rpc('exec_sql', {
        sql: `
          CREATE POLICY "users_select_own" ON public.users
            FOR SELECT
            USING (auth.uid() = id);
        `
      })
      console.log('‚úÖ Pol√≠tica SELECT criada')
    } catch (error) {
      console.log('‚ùå Erro ao criar pol√≠tica SELECT:', error.message)
    }
    
    // Pol√≠tica para UPDATE
    try {
      await supabaseAdmin.rpc('exec_sql', {
        sql: `
          CREATE POLICY "users_update_own" ON public.users
            FOR UPDATE
            USING (auth.uid() = id)
            WITH CHECK (auth.uid() = id);
        `
      })
      console.log('‚úÖ Pol√≠tica UPDATE criada')
    } catch (error) {
      console.log('‚ùå Erro ao criar pol√≠tica UPDATE:', error.message)
    }
    
    // Pol√≠tica para INSERT (mais restritiva)
    try {
      await supabaseAdmin.rpc('exec_sql', {
        sql: `
          CREATE POLICY "users_insert_service" ON public.users
            FOR INSERT
            WITH CHECK (true);
        `
      })
      console.log('‚úÖ Pol√≠tica INSERT criada')
    } catch (error) {
      console.log('‚ùå Erro ao criar pol√≠tica INSERT:', error.message)
    }
    
    console.log('\n5Ô∏è‚É£ Testando as novas pol√≠ticas...')
    
    // Criar usu√°rio de teste
    const testEmail = `teste.rls.${Date.now()}@example.com`
    const testPassword = 'TesteSeguro123!'
    
    console.log(`üìß Criando usu√°rio de teste: ${testEmail}`)
    
    const { data: signUpData, error: signUpError } = await supabaseClient.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          nome: 'Teste RLS'
        }
      }
    })
    
    if (signUpError) {
      console.log('‚ùå Erro ao criar usu√°rio de teste:', signUpError.message)
      return
    }
    
    if (signUpData.user) {
      console.log('‚úÖ Usu√°rio de teste criado:', signUpData.user.id)
      
      // Confirmar email
      await supabaseAdmin.auth.admin.updateUserById(
        signUpData.user.id,
        { email_confirm: true }
      )
      
      // Criar perfil manualmente (j√° que o trigger pode n√£o estar funcionando)
      const { error: insertError } = await supabaseAdmin
        .from('users')
        .insert({
          id: signUpData.user.id,
          email: testEmail,
          nome: 'Teste RLS',
          is_admin: false,
          onboarding_completed: false
        })
      
      if (insertError) {
        console.log('‚ùå Erro ao criar perfil:', insertError.message)
      } else {
        console.log('‚úÖ Perfil criado com sucesso')
      }
      
      // Testar login
      console.log('\n6Ô∏è‚É£ Testando login com novas pol√≠ticas...')
      
      const { data: loginData, error: loginError } = await supabaseClient.auth.signInWithPassword({
        email: testEmail,
        password: testPassword
      })
      
      if (loginError) {
        console.log('‚ùå Erro no login:', loginError.message)
      } else {
        console.log('‚úÖ Login realizado com sucesso!')
        
        // Testar carregamento do perfil (aqui estava o problema da recurs√£o)
        console.log('\n7Ô∏è‚É£ Testando carregamento do perfil...')
        
        const { data: profileData, error: profileError } = await supabaseClient
          .from('users')
          .select('*')
          .eq('id', loginData.user.id)
          .single()
        
        if (profileError) {
          console.log('‚ùå Erro ao carregar perfil:', profileError.message)
          if (profileError.message.includes('infinite recursion')) {
            console.log('‚ö†Ô∏è  AINDA H√Å RECURS√ÉO INFINITA! Pol√≠ticas precisam ser ajustadas manualmente.')
          }
        } else {
          console.log('‚úÖ Perfil carregado com sucesso!')
          console.log('   Nome:', profileData.nome)
          console.log('   üéâ PROBLEMA DA RECURS√ÉO RESOLVIDO!')
        }
        
        // Logout
        await supabaseClient.auth.signOut()
        console.log('‚úÖ Logout realizado')
      }
      
      // Limpar usu√°rio de teste
      console.log('\nüßπ Limpando usu√°rio de teste...')
      await supabaseAdmin.auth.admin.deleteUser(signUpData.user.id)
      await supabaseAdmin.from('users').delete().eq('id', signUpData.user.id)
      console.log('‚úÖ Usu√°rio de teste removido')
    }
    
    console.log('\nüìä RESULTADO DA CORRE√á√ÉO')
    console.log('=' .repeat(40))
    
    console.log('\n‚úÖ A√á√ïES REALIZADAS:')
    console.log('‚Ä¢ Pol√≠ticas RLS antigas removidas')
    console.log('‚Ä¢ Novas pol√≠ticas RLS criadas (sem recurs√£o)')
    console.log('‚Ä¢ Teste de login/perfil realizado')
    
    console.log('\nüîß SE O PROBLEMA PERSISTIR:')
    console.log('1. Execute manualmente o arquivo corrigir-rls-policies.sql no painel do Supabase')
    console.log('2. Execute tamb√©m o arquivo setup-trigger-manual.sql')
    console.log('3. Teste o login no frontend')
    console.log('4. Verifique o console do navegador')
    
    console.log('\nüéâ CORRE√á√ÉO RLS CONCLU√çDA!')
    
  } catch (error) {
    console.error('‚ùå Erro durante corre√ß√£o RLS:', error.message)
    
    console.log('\n‚ö†Ô∏è  FALLBACK: Execute manualmente os arquivos SQL:')
    console.log('1. corrigir-rls-policies.sql')
    console.log('2. setup-trigger-manual.sql')
  }
}

// Executar corre√ß√£o
aplicarCorrecaoRLS().catch(console.error)