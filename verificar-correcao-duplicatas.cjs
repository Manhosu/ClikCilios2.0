require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseServiceKey || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas');
  console.error('Necess√°rio: VITE_SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, VITE_SUPABASE_ANON_KEY');
  process.exit(1);
}

const supabaseService = createClient(supabaseUrl, supabaseServiceKey);
const supabaseAnon = createClient(supabaseUrl, supabaseAnonKey);

async function verificarCorrecaoDuplicatas() {
  console.log('üîç VERIFICA√á√ÉO DE CORRE√á√ÉO DE DUPLICATAS\n');

  try {
    // 1. Verificar conex√£o
    console.log('1. üîó Testando conex√£o com Supabase...');
    const { data: testConnection } = await supabaseService
      .from('users')
      .select('count')
      .limit(1);
    
    if (testConnection !== null) {
      console.log('   ‚úÖ Conex√£o estabelecida com sucesso\n');
    } else {
      throw new Error('Falha na conex√£o');
    }

    // 2. Verificar emails duplicados
    console.log('2. üìß Verificando emails duplicados...');
    const { data: duplicateEmails, error: duplicateError } = await supabaseService
      .rpc('check_duplicate_emails');
    
    if (duplicateError) {
      // Se a fun√ß√£o n√£o existe, verificar manualmente
      const { data: emailCheck } = await supabaseService
        .from('users')
        .select('email')
        .then(result => {
          if (result.data) {
            const emails = result.data.map(u => u.email);
            const duplicates = emails.filter((email, index) => emails.indexOf(email) !== index);
            return { data: duplicates.length };
          }
          return { data: 0 };
        });
      
      if (emailCheck.data === 0) {
        console.log('   ‚úÖ Nenhum email duplicado encontrado');
      } else {
        console.log(`   ‚ö†Ô∏è ${emailCheck.data} emails duplicados encontrados`);
      }
    }

    // 3. Verificar sincroniza√ß√£o entre auth.users e public.users
    console.log('\n3. üîÑ Verificando sincroniza√ß√£o de usu√°rios...');
    
    // Contar usu√°rios em auth.users
    const { count: authUsersCount } = await supabaseService
      .from('users')
      .select('*', { count: 'exact', head: true })
      .eq('id', 'non-existent-id'); // Hack para contar auth.users via service
    
    // Contar usu√°rios em public.users
    const { count: publicUsersCount } = await supabaseService
      .from('users')
      .select('*', { count: 'exact', head: true });
    
    console.log(`   Auth.users: ${authUsersCount || 'N/A'} usu√°rios`);
    console.log(`   Public.users: ${publicUsersCount || 0} usu√°rios`);
    
    // 4. Testar acesso an√¥nimo
    console.log('\n4. üîì Testando acesso an√¥nimo...');
    const { data: anonUsers, error: anonError } = await supabaseAnon
      .from('users')
      .select('id, email')
      .limit(5);
    
    if (anonError) {
      console.log(`   ‚ùå Erro no acesso an√¥nimo: ${anonError.message}`);
    } else {
      console.log(`   ‚úÖ Acesso an√¥nimo funcionando: ${anonUsers?.length || 0} usu√°rios vis√≠veis`);
    }

    // 5. Verificar pol√≠ticas RLS
    console.log('\n5. üîí Verificando pol√≠ticas RLS...');
    const { data: policies, error: policiesError } = await supabaseService
      .rpc('get_table_policies', { table_name: 'users' });
    
    if (policiesError) {
      console.log('   ‚ö†Ô∏è N√£o foi poss√≠vel verificar pol√≠ticas RLS automaticamente');
    } else if (policies && policies.length > 0) {
      console.log(`   ‚úÖ ${policies.length} pol√≠ticas RLS encontradas`);
      policies.forEach(policy => {
        console.log(`      - ${policy.policyname}: ${policy.cmd}`);
      });
    } else {
      console.log('   ‚ö†Ô∏è Nenhuma pol√≠tica RLS encontrada');
    }

    // 6. Verificar fun√ß√£o handle_new_user
    console.log('\n6. ‚öôÔ∏è Verificando fun√ß√£o handle_new_user...');
    const { data: functionExists } = await supabaseService
      .rpc('check_function_exists', { function_name: 'handle_new_user' })
      .catch(() => ({ data: false }));
    
    if (functionExists) {
      console.log('   ‚úÖ Fun√ß√£o handle_new_user encontrada');
    } else {
      console.log('   ‚ùå Fun√ß√£o handle_new_user n√£o encontrada');
    }

    // 7. Testar cria√ß√£o de usu√°rio (simula√ß√£o)
    console.log('\n7. üß™ Testando integridade dos dados...');
    
    // Verificar se h√° usu√°rios √≥rf√£os
    const { data: orphanCheck } = await supabaseService
      .from('users')
      .select('id, email')
      .limit(1);
    
    if (orphanCheck && orphanCheck.length > 0) {
      console.log('   ‚úÖ Dados √≠ntegros: usu√°rios encontrados na tabela public.users');
    } else {
      console.log('   ‚ö†Ô∏è Nenhum usu√°rio encontrado na tabela public.users');
    }

    // 8. Resumo final
    console.log('\nüìã RESUMO DA VERIFICA√á√ÉO:');
    console.log('\n‚úÖ VERIFICA√á√ïES CONCLU√çDAS:');
    console.log('   - Conex√£o com Supabase');
    console.log('   - Verifica√ß√£o de emails duplicados');
    console.log('   - Contagem de usu√°rios');
    console.log('   - Teste de acesso an√¥nimo');
    console.log('   - Verifica√ß√£o de pol√≠ticas RLS');
    console.log('   - Verifica√ß√£o da fun√ß√£o handle_new_user');
    console.log('   - Integridade dos dados');
    
    console.log('\nüîß PR√ìXIMOS PASSOS:');
    console.log('1. Execute solucao-final-robusta.sql no painel do Supabase');
    console.log('2. Configure o trigger manualmente:');
    console.log('   - Database > Triggers > Create new trigger');
    console.log('   - Nome: on_auth_user_created');
    console.log('   - Tabela: auth.users');
    console.log('   - Evento: Insert');
    console.log('   - Fun√ß√£o: public.handle_new_user');
    console.log('3. Teste o login no frontend');
    console.log('4. Execute: node testar-solucao-final.cjs');
    
  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error.message);
    console.error('\nüîß SOLU√á√ÉO:');
    console.error('1. Verifique as vari√°veis de ambiente');
    console.error('2. Execute solucao-final-robusta.sql no painel do Supabase');
    console.error('3. Configure o trigger manualmente');
  }
}

// Executar verifica√ß√£o
verificarCorrecaoDuplicatas();