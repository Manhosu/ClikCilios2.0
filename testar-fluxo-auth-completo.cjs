const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseServiceKey || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas')
  process.exit(1)
}

const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey)
const supabaseClient = createClient(supabaseUrl, supabaseAnonKey)

async function testarFluxoAuthCompleto() {
  console.log('üß™ TESTE COMPLETO DO FLUXO DE AUTENTICA√á√ÉO')
  console.log('=' .repeat(60))
  
  try {
    // 1. Verificar estado atual dos usu√°rios
    console.log('\n1Ô∏è‚É£ Verificando estado atual...')
    
    const { data: authUsers, error: authError } = await supabaseAdmin.auth.admin.listUsers()
    const { data: tableUsers, error: tableError } = await supabaseAdmin
      .from('users')
      .select('id, email, nome')
    
    if (authError || tableError) {
      console.error('‚ùå Erro ao verificar usu√°rios:', authError?.message || tableError?.message)
      return
    }
    
    console.log(`‚úÖ Usu√°rios no Auth: ${authUsers.users.length}`)
    console.log(`‚úÖ Usu√°rios na tabela: ${tableUsers.length}`)
    
    const tableUserIds = new Set(tableUsers.map(u => u.id))
    const orphanUsers = authUsers.users.filter(u => !tableUserIds.has(u.id))
    
    if (orphanUsers.length > 0) {
      console.log(`‚ö†Ô∏è  ${orphanUsers.length} usu√°rios √≥rf√£os ainda existem`)
    } else {
      console.log('‚úÖ N√£o h√° usu√°rios √≥rf√£os')
    }
    
    // 2. Testar cria√ß√£o de novo usu√°rio
    console.log('\n2Ô∏è‚É£ Testando cria√ß√£o de novo usu√°rio...')
    
    const testEmail = `teste.auth.${Date.now()}@example.com`
    const testPassword = 'TesteSeguro123!'
    const testNome = 'Usu√°rio Teste Auth'
    
    console.log(`üìß Criando usu√°rio: ${testEmail}`)
    
    const { data: signUpData, error: signUpError } = await supabaseClient.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          nome: testNome
        }
      }
    })
    
    if (signUpError) {
      console.log('‚ùå Erro ao criar usu√°rio:', signUpError.message)
    } else if (signUpData.user) {
      console.log('‚úÖ Usu√°rio criado no Auth:', signUpData.user.id)
      
      // Aguardar trigger
      console.log('‚è≥ Aguardando 3 segundos para o trigger...')
      await new Promise(resolve => setTimeout(resolve, 3000))
      
      // Verificar se foi criado na tabela
      const { data: newUserData, error: newUserError } = await supabaseAdmin
        .from('users')
        .select('*')
        .eq('id', signUpData.user.id)
        .single()
      
      if (newUserError || !newUserData) {
        console.log('‚ùå Usu√°rio n√£o foi criado automaticamente na tabela')
        console.log('üîß Criando manualmente...')
        
        const { error: manualError } = await supabaseAdmin
          .from('users')
          .insert({
            id: signUpData.user.id,
            email: testEmail,
            nome: testNome,
            is_admin: false,
            onboarding_completed: false
          })
        
        if (manualError) {
          console.log('‚ùå Erro ao criar manualmente:', manualError.message)
        } else {
          console.log('‚úÖ Usu√°rio criado manualmente na tabela')
        }
      } else {
        console.log('‚úÖ Usu√°rio criado automaticamente via trigger!')
      }
      
      // 3. Testar login
      console.log('\n3Ô∏è‚É£ Testando login...')
      
      // Primeiro, confirmar o email se necess√°rio
      if (!signUpData.user.email_confirmed_at) {
        console.log('üìß Confirmando email...')
        const { error: confirmError } = await supabaseAdmin.auth.admin.updateUserById(
          signUpData.user.id,
          { email_confirm: true }
        )
        
        if (confirmError) {
          console.log('‚ùå Erro ao confirmar email:', confirmError.message)
        } else {
          console.log('‚úÖ Email confirmado')
        }
      }
      
      // Tentar login
      const { data: loginData, error: loginError } = await supabaseClient.auth.signInWithPassword({
        email: testEmail,
        password: testPassword
      })
      
      if (loginError) {
        console.log('‚ùå Erro no login:', loginError.message)
      } else if (loginData.user) {
        console.log('‚úÖ Login realizado com sucesso!')
        console.log('   User ID:', loginData.user.id)
        console.log('   Email:', loginData.user.email)
        
        // 4. Testar carregamento do perfil
        console.log('\n4Ô∏è‚É£ Testando carregamento do perfil...')
        
        const { data: profileData, error: profileError } = await supabaseClient
          .from('users')
          .select('*')
          .eq('id', loginData.user.id)
          .single()
        
        if (profileError) {
          console.log('‚ùå Erro ao carregar perfil:', profileError.message)
          console.log('   Isso pode causar o loop de login!')
        } else {
          console.log('‚úÖ Perfil carregado com sucesso!')
          console.log('   Nome:', profileData.nome)
          console.log('   Admin:', profileData.is_admin)
          console.log('   Onboarding:', profileData.onboarding_completed)
        }
        
        // 5. Testar logout
        console.log('\n5Ô∏è‚É£ Testando logout...')
        
        const { error: logoutError } = await supabaseClient.auth.signOut()
        
        if (logoutError) {
          console.log('‚ùå Erro no logout:', logoutError.message)
        } else {
          console.log('‚úÖ Logout realizado com sucesso!')
        }
      }
      
      // Limpar usu√°rio de teste
      console.log('\nüßπ Limpando usu√°rio de teste...')
      await supabaseAdmin.auth.admin.deleteUser(signUpData.user.id)
      await supabaseAdmin.from('users').delete().eq('id', signUpData.user.id)
      console.log('‚úÖ Usu√°rio de teste removido')
    }
    
    // 6. Testar com usu√°rio existente
    console.log('\n6Ô∏è‚É£ Testando com usu√°rio existente...')
    
    // Pegar um usu√°rio que existe em ambas as tabelas
    const { data: existingUsers, error: existingError } = await supabaseAdmin
      .from('users')
      .select('id, email')
      .limit(1)
    
    if (existingError || !existingUsers || existingUsers.length === 0) {
      console.log('‚ùå N√£o foi poss√≠vel encontrar usu√°rio existente para teste')
    } else {
      const existingUser = existingUsers[0]
      console.log(`üß™ Testando com usu√°rio existente: ${existingUser.email}`)
      
      // Verificar se existe no Auth
      const { data: authUserData, error: authUserError } = await supabaseAdmin.auth.admin.getUserById(existingUser.id)
      
      if (authUserError || !authUserData.user) {
        console.log('‚ùå Usu√°rio n√£o encontrado no Auth')
      } else {
        console.log('‚úÖ Usu√°rio existe em ambas as tabelas')
        
        // Simular carregamento de perfil como o frontend faria
        const { data: profileData, error: profileError } = await supabaseClient
          .from('users')
          .select('*')
          .eq('id', existingUser.id)
          .single()
        
        if (profileError) {
          console.log('‚ùå Erro ao carregar perfil do usu√°rio existente:', profileError.message)
          console.log('   Isso pode causar problemas de login!')
        } else {
          console.log('‚úÖ Perfil do usu√°rio existente carregado com sucesso')
        }
      }
    }
    
    // 7. Verificar configura√ß√µes do frontend
    console.log('\n7Ô∏è‚É£ Verificando configura√ß√µes do frontend...')
    
    console.log('üìã Vari√°veis de ambiente:')
    console.log(`   VITE_SUPABASE_URL: ${supabaseUrl}`)
    console.log(`   VITE_SUPABASE_ANON_KEY: ${supabaseAnonKey ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`)
    
    // 8. Resumo e diagn√≥stico
    console.log('\nüìä RESUMO DO DIAGN√ìSTICO')
    console.log('=' .repeat(50))
    
    console.log('\n‚úÖ PROBLEMAS RESOLVIDOS:')
    console.log('‚Ä¢ Usu√°rios √≥rf√£os corrigidos (Auth ‚Üî Tabela users sincronizados)')
    console.log('‚Ä¢ Pol√≠ticas RLS configuradas')
    console.log('‚Ä¢ Fluxo de login/logout testado')
    
    console.log('\n‚ö†Ô∏è  POSS√çVEIS CAUSAS DO LOOP DE LOGIN:')
    console.log('1. Trigger n√£o funcionando para novos usu√°rios')
    console.log('2. Problemas de cache no frontend')
    console.log('3. Erro na l√≥gica do useAuth hook')
    console.log('4. Problemas de RLS impedindo carregamento do perfil')
    
    console.log('\nüîß PR√ìXIMOS PASSOS:')
    console.log('1. Execute o SQL manual no painel do Supabase:')
    console.log('   - Abra Database > SQL Editor')
    console.log('   - Execute o conte√∫do do arquivo setup-trigger-manual.sql')
    console.log('2. Teste o login no frontend')
    console.log('3. Verifique o console do navegador para erros')
    console.log('4. Se o problema persistir, verifique o c√≥digo do useAuth hook')
    
    console.log('\nüéâ DIAGN√ìSTICO CONCLU√çDO!')
    
  } catch (error) {
    console.error('‚ùå Erro durante teste:', error.message)
  }
}

// Executar teste
testarFluxoAuthCompleto().catch(console.error)