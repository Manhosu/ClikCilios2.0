// Teste de performance do sistema de autentica√ß√£o
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
dotenv.config();

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Credenciais do Supabase n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

// M√©tricas de performance
class PerformanceMetrics {
  constructor() {
    this.operations = [];
  }
  
  addOperation(name, duration, success = true) {
    this.operations.push({ name, duration, success, timestamp: Date.now() });
  }
  
  getStats(operationName = null) {
    const ops = operationName 
      ? this.operations.filter(op => op.name === operationName)
      : this.operations;
    
    if (ops.length === 0) return null;
    
    const durations = ops.map(op => op.duration);
    const successCount = ops.filter(op => op.success).length;
    
    return {
      count: ops.length,
      successRate: (successCount / ops.length) * 100,
      min: Math.min(...durations),
      max: Math.max(...durations),
      avg: durations.reduce((a, b) => a + b, 0) / durations.length,
      median: durations.sort((a, b) => a - b)[Math.floor(durations.length / 2)]
    };
  }
  
  printReport() {
    console.log('\nüìä RELAT√ìRIO DE PERFORMANCE');
    console.log('============================================================');
    
    const operationTypes = [...new Set(this.operations.map(op => op.name))];
    
    operationTypes.forEach(opType => {
      const stats = this.getStats(opType);
      if (stats) {
        console.log(`\nüîß ${opType.toUpperCase()}:`);
        console.log(`   Opera√ß√µes: ${stats.count}`);
        console.log(`   Taxa de sucesso: ${stats.successRate.toFixed(1)}%`);
        console.log(`   Tempo m√≠nimo: ${stats.min}ms`);
        console.log(`   Tempo m√°ximo: ${stats.max}ms`);
        console.log(`   Tempo m√©dio: ${stats.avg.toFixed(1)}ms`);
        console.log(`   Mediana: ${stats.median}ms`);
        
        // Avalia√ß√£o de performance
        if (stats.avg < 200) {
          console.log(`   Avalia√ß√£o: ‚úÖ Excelente`);
        } else if (stats.avg < 500) {
          console.log(`   Avalia√ß√£o: ‚úÖ Bom`);
        } else if (stats.avg < 1000) {
          console.log(`   Avalia√ß√£o: ‚ö†Ô∏è Aceit√°vel`);
        } else {
          console.log(`   Avalia√ß√£o: ‚ùå Lento`);
        }
      }
    });
  }
}

const metrics = new PerformanceMetrics();

// Fun√ß√£o para medir tempo de execu√ß√£o
async function measureTime(operationName, operation) {
  const startTime = Date.now();
  try {
    const result = await operation();
    const duration = Date.now() - startTime;
    metrics.addOperation(operationName, duration, true);
    return { success: true, result, duration };
  } catch (error) {
    const duration = Date.now() - startTime;
    metrics.addOperation(operationName, duration, false);
    return { success: false, error, duration };
  }
}

// Teste de conectividade b√°sica
async function testBasicConnectivity() {
  console.log('\nüåê Testando conectividade b√°sica...');
  
  const tests = [
    {
      name: 'ping_database',
      operation: () => supabase.from('users').select('count').limit(1)
    },
    {
      name: 'get_session',
      operation: () => supabase.auth.getSession()
    },
    {
      name: 'get_user',
      operation: () => supabase.auth.getUser()
    }
  ];
  
  for (const test of tests) {
    const result = await measureTime(test.name, test.operation);
    console.log(`${result.success ? '‚úÖ' : '‚ùå'} ${test.name}: ${result.duration}ms`);
  }
}

// Teste de consultas de usu√°rio
async function testUserQueries() {
  console.log('\nüë• Testando consultas de usu√°rio...');
  
  const tests = [
    {
      name: 'list_users_10',
      operation: () => supabase.from('users').select('*').limit(10)
    },
    {
      name: 'list_users_50',
      operation: () => supabase.from('users').select('*').limit(50)
    },
    {
      name: 'count_users',
      operation: () => supabase.from('users').select('*', { count: 'exact', head: true })
    },
    {
      name: 'search_user_by_email',
      operation: () => supabase.from('users').select('*').ilike('email', '%@gmail.com%').limit(5)
    },
    {
      name: 'get_user_by_id',
      operation: async () => {
        // Primeiro pegar um ID v√°lido
        const { data: users } = await supabase.from('users').select('id').limit(1);
        if (users && users.length > 0) {
          return supabase.from('users').select('*').eq('id', users[0].id).single();
        }
        throw new Error('Nenhum usu√°rio encontrado');
      }
    }
  ];
  
  for (const test of tests) {
    const result = await measureTime(test.name, test.operation);
    console.log(`${result.success ? '‚úÖ' : '‚ùå'} ${test.name}: ${result.duration}ms`);
  }
}

// Teste de opera√ß√µes de autentica√ß√£o
async function testAuthOperations() {
  console.log('\nüîê Testando opera√ß√µes de autentica√ß√£o...');
  
  const tests = [
    {
      name: 'refresh_session',
      operation: () => supabase.auth.refreshSession()
    },
    {
      name: 'get_session_multiple',
      operation: async () => {
        // Fazer m√∫ltiplas chamadas para testar cache
        const promises = Array(5).fill().map(() => supabase.auth.getSession());
        return Promise.all(promises);
      }
    },
    {
      name: 'auth_state_change_listener',
      operation: () => {
        return new Promise((resolve) => {
          const { data: { subscription } } = supabase.auth.onAuthStateChange(() => {
            subscription.unsubscribe();
            resolve(true);
          });
          // Simular mudan√ßa de estado
          setTimeout(() => {
            subscription.unsubscribe();
            resolve(true);
          }, 100);
        });
      }
    }
  ];
  
  for (const test of tests) {
    const result = await measureTime(test.name, test.operation);
    console.log(`${result.success ? '‚úÖ' : '‚ùå'} ${test.name}: ${result.duration}ms`);
  }
}

// Teste de carga (m√∫ltiplas opera√ß√µes simult√¢neas)
async function testConcurrentLoad() {
  console.log('\n‚ö° Testando carga concorrente...');
  
  const concurrentTests = [
    {
      name: 'concurrent_user_queries',
      count: 10,
      operation: () => supabase.from('users').select('id, email, nome').limit(5)
    },
    {
      name: 'concurrent_session_checks',
      count: 15,
      operation: () => supabase.auth.getSession()
    },
    {
      name: 'concurrent_user_counts',
      count: 8,
      operation: () => supabase.from('users').select('*', { count: 'exact', head: true })
    }
  ];
  
  for (const test of concurrentTests) {
    console.log(`\nüîÑ Executando ${test.count} opera√ß√µes ${test.name} simult√¢neas...`);
    
    const startTime = Date.now();
    const promises = Array(test.count).fill().map(() => 
      measureTime(test.name, test.operation)
    );
    
    const results = await Promise.all(promises);
    const totalTime = Date.now() - startTime;
    
    const successCount = results.filter(r => r.success).length;
    const avgTime = results.reduce((sum, r) => sum + r.duration, 0) / results.length;
    
    console.log(`‚úÖ Conclu√≠do: ${successCount}/${test.count} sucessos`);
    console.log(`‚è±Ô∏è Tempo total: ${totalTime}ms`);
    console.log(`üìä Tempo m√©dio por opera√ß√£o: ${avgTime.toFixed(1)}ms`);
    console.log(`üöÄ Throughput: ${(test.count / (totalTime / 1000)).toFixed(1)} ops/seg`);
  }
}

// Teste de stress (opera√ß√µes repetidas)
async function testStressLoad() {
  console.log('\nüî• Testando carga de stress...');
  
  const stressTest = {
    name: 'stress_user_queries',
    iterations: 50,
    operation: () => supabase.from('users').select('id, email').limit(3)
  };
  
  console.log(`üîÑ Executando ${stressTest.iterations} opera√ß√µes sequenciais...`);
  
  const startTime = Date.now();
  let successCount = 0;
  
  for (let i = 0; i < stressTest.iterations; i++) {
    const result = await measureTime(stressTest.name, stressTest.operation);
    if (result.success) successCount++;
    
    // Log de progresso a cada 10 opera√ß√µes
    if ((i + 1) % 10 === 0) {
      console.log(`üìà Progresso: ${i + 1}/${stressTest.iterations} (${successCount} sucessos)`);
    }
  }
  
  const totalTime = Date.now() - startTime;
  
  console.log(`\n‚úÖ Stress test conclu√≠do:`);
  console.log(`üìä Sucessos: ${successCount}/${stressTest.iterations}`);
  console.log(`‚è±Ô∏è Tempo total: ${totalTime}ms`);
  console.log(`üöÄ Throughput: ${(stressTest.iterations / (totalTime / 1000)).toFixed(1)} ops/seg`);
}

// Fun√ß√£o principal
async function runPerformanceTests() {
  console.log('üöÄ Iniciando testes de performance do sistema de autentica√ß√£o...');
  console.log('============================================================');
  
  const startTime = Date.now();
  
  try {
    await testBasicConnectivity();
    await testUserQueries();
    await testAuthOperations();
    await testConcurrentLoad();
    await testStressLoad();
    
    const totalTime = Date.now() - startTime;
    
    // Relat√≥rio final
    metrics.printReport();
    
    console.log('\nüéØ AVALIA√á√ÉO GERAL DE PERFORMANCE');
    console.log('============================================================');
    
    const overallStats = metrics.getStats();
    console.log(`üìä Total de opera√ß√µes: ${overallStats.count}`);
    console.log(`‚úÖ Taxa de sucesso geral: ${overallStats.successRate.toFixed(1)}%`);
    console.log(`‚è±Ô∏è Tempo m√©dio de resposta: ${overallStats.avg.toFixed(1)}ms`);
    console.log(`‚ö° Tempo total de teste: ${totalTime}ms`);
    
    if (overallStats.successRate >= 95 && overallStats.avg < 500) {
      console.log('\nüèÜ EXCELENTE: Sistema de autentica√ß√£o com performance superior!');
    } else if (overallStats.successRate >= 90 && overallStats.avg < 1000) {
      console.log('\n‚úÖ BOM: Sistema de autentica√ß√£o com performance adequada');
    } else {
      console.log('\n‚ö†Ô∏è ATEN√á√ÉO: Sistema pode precisar de otimiza√ß√µes');
    }
    
  } catch (error) {
    console.error(`‚ùå Erro durante os testes: ${error.message}`);
  }
  
  console.log('\nüèÅ Testes de performance conclu√≠dos');
}

// Executar testes
runPerformanceTests().catch(console.error);