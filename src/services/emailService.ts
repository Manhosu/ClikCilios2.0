import { EmailTemplatesService } from './emailTemplates.js';
import { createClient } from '@supabase/supabase-js';

// Cliente Supabase para gerenciar usu√°rios
const supabase = createClient(
  process.env.VITE_SUPABASE_URL || '',
  process.env.VITE_SUPABASE_ANON_KEY || ''
);

// Cliente admin para opera√ß√µes privilegiadas
const adminClient = createClient(
  process.env.VITE_SUPABASE_URL || '',
  process.env.SUPABASE_SERVICE_ROLE_KEY || ''
);

interface SendEmailOptions {
  to: string;
  subject: string;
  htmlContent: string;
  textContent: string;
}

/**
 * Servi√ßo para envio de emails usando SendGrid
 */
export class EmailService {
  private static apiKey = process.env.SENDGRID_API_KEY;
  private static fromEmail = process.env.SENDGRID_FROM_EMAIL || 'noreply@ciliosclick.com';
  private static fromName = process.env.SENDGRID_FROM_NAME || 'C√≠liosClick';

  /**
   * Garante que o usu√°rio existe no sistema com as credenciais fornecidas
   */
  private static async ensureUserExists(
    email: string,
    password: string,
    name: string
  ): Promise<boolean> {
    try {
      // Verificar se o usu√°rio j√° existe e pode fazer login
      const { data: loginTest } = await supabase.auth.signInWithPassword({
        email,
        password
      });

      if (loginTest && loginTest.user) {
        console.log(`‚úÖ Usu√°rio ${email} j√° existe e credenciais s√£o v√°lidas`);
        await supabase.auth.signOut();
        return true;
      }

      // Se chegou aqui, o usu√°rio n√£o existe ou as credenciais est√£o incorretas
      console.log(`üîß Criando/atualizando usu√°rio ${email}...`);

      // Tentar deletar usu√°rio existente se houver
      if (process.env.SUPABASE_SERVICE_ROLE_KEY) {
        const { data: users } = await adminClient.auth.admin.listUsers();
        const existingUser = users?.users.find(u => u.email === email);
        
        if (existingUser) {
          console.log(`üóëÔ∏è Deletando usu√°rio existente ${email}...`);
          await adminClient.auth.admin.deleteUser(existingUser.id);
          
          // Deletar da tabela users tamb√©m
          await supabase.from('users').delete().eq('email', email);
          
          // Aguardar propaga√ß√£o
          await new Promise(resolve => setTimeout(resolve, 2000));
        }

        // Criar novo usu√°rio
        const { data: newUser, error: createError } = await adminClient.auth.admin.createUser({
          email,
          password,
          email_confirm: true,
          user_metadata: { name }
        });

        if (createError) {
          console.error(`‚ùå Erro ao criar usu√°rio ${email}:`, createError.message);
          return false;
        }

        // Inserir na tabela users
        await supabase.from('users').insert({
          id: newUser.user.id,
          email,
          name,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        });

        console.log(`‚úÖ Usu√°rio ${email} criado com sucesso`);
        return true;
      } else {
        console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY n√£o configurada');
        return false;
      }
    } catch (error) {
      console.error(`‚ùå Erro ao garantir usu√°rio ${email}:`, error);
      return false;
    }
  }

  /**
   * Envia um email usando a API do SendGrid
   */
  static async sendEmail(options: SendEmailOptions): Promise<boolean> {
    if (!this.apiKey) {
      console.error('‚ùå SENDGRID_API_KEY n√£o configurada');
      return false;
    }

    try {
      const response = await fetch('https://api.sendgrid.com/v3/mail/send', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          personalizations: [
            {
              to: [{ email: options.to }],
              subject: options.subject,
            },
          ],
          from: {
            email: this.fromEmail,
            name: this.fromName,
          },
          content: [
            {
              type: 'text/plain',
              value: options.textContent,
            },
            {
              type: 'text/html',
              value: options.htmlContent,
            },
          ],
        }),
      });

      if (response.ok) {
        console.log(`‚úÖ Email enviado com sucesso para ${options.to}`);
        return true;
      } else {
        const errorData = await response.text();
        console.error(`‚ùå Erro ao enviar email:`, response.status, errorData);
        return false;
      }
    } catch (error) {
      console.error('‚ùå Erro ao enviar email:', error);
      return false;
    }
  }

  /**
   * Envia email com credenciais de acesso
   * Garante que o usu√°rio existe no sistema antes de enviar
   */
  static async sendCredentialsEmail(
    email: string,
    userName: string,
    password: string,
    loginUrl: string = 'https://clik-cilios2-0.vercel.app/login'
  ): Promise<boolean> {
    // Garantir que o usu√°rio existe no sistema
    const userExists = await this.ensureUserExists(email, password, userName);
    
    if (!userExists) {
      console.error(`‚ùå N√£o foi poss√≠vel garantir que o usu√°rio ${email} existe no sistema`);
      return false;
    }

    const template = EmailTemplatesService.credentialsEmail({
      userName,
      password,
      loginUrl,
      userEmail: email
    });

    const emailSent = await this.sendEmail({
      to: email,
      subject: template.subject,
      htmlContent: template.htmlContent,
      textContent: template.textContent
    });

    if (emailSent) {
      console.log(`‚úÖ Email de credenciais enviado para ${email} com credenciais V√ÅLIDAS`);
    }

    return emailSent;
  }

  /**
   * Envia email de boas-vindas
   * Garante que o usu√°rio existe no sistema antes de enviar
   */
  static async sendWelcomeEmail(
    email: string,
    userName: string,
    loginUrl: string = 'https://clik-cilios2-0.vercel.app/login',
    cupomCode?: string,
    parceiraName?: string,
    password: string = 'ClikCilios2024!' // Senha padr√£o para novos usu√°rios
  ): Promise<boolean> {
    // Garantir que o usu√°rio existe no sistema
    const userExists = await this.ensureUserExists(email, password, userName);
    
    if (!userExists) {
      console.error(`‚ùå N√£o foi poss√≠vel garantir que o usu√°rio ${email} existe no sistema`);
      return false;
    }

    const template = EmailTemplatesService.welcomeEmail({
      userName,
      userEmail: email,
      loginUrl,
      cupomCode,
      parceiraName,
    });

    const emailSent = await this.sendEmail({
      to: email,
      subject: template.subject,
      htmlContent: template.htmlContent,
      textContent: template.textContent
    });

    if (emailSent) {
      console.log(`‚úÖ Email de boas-vindas enviado para ${email} com credenciais V√ÅLIDAS`);
    }

    return emailSent;
  }

  /**
   * Envia notifica√ß√£o para parceira
   */
  static async sendParceiraNotification(
    parceiraEmail: string,
    parceiraName: string,
    clientName: string,
    clientEmail: string,
    cupomCode: string,
    commissionAmount: number,
    purchaseValue: number
  ): Promise<boolean> {
    const template = EmailTemplatesService.parceiraNotification({
      parceiraName,
      parceiraEmail,
      clientName,
      clientEmail,
      cupomCode,
      commissionAmount,
      purchaseValue,
    });

    return this.sendEmail({
      to: parceiraEmail,
      subject: template.subject,
      htmlContent: template.htmlContent,
      textContent: template.textContent,
    });
  }
}