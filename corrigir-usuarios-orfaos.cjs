const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function corrigirUsuariosOrfaos() {
  console.log('üîß CORRIGINDO USU√ÅRIOS √ìRF√ÉOS')
  console.log('=' .repeat(50))
  
  try {
    // 1. Buscar todos os usu√°rios do Auth
    console.log('\n1Ô∏è‚É£ Buscando usu√°rios do Auth...')
    const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers()
    
    if (authError) {
      console.error('‚ùå Erro ao listar usu√°rios do Auth:', authError.message)
      return
    }
    
    console.log(`‚úÖ Encontrados ${authUsers.users.length} usu√°rios no Auth`)
    
    // 2. Buscar todos os usu√°rios da tabela users
    console.log('\n2Ô∏è‚É£ Buscando usu√°rios da tabela users...')
    const { data: tableUsers, error: tableError } = await supabase
      .from('users')
      .select('id, email')
    
    if (tableError) {
      console.error('‚ùå Erro ao acessar tabela users:', tableError.message)
      return
    }
    
    console.log(`‚úÖ Encontrados ${tableUsers.length} usu√°rios na tabela users`)
    
    // 3. Identificar usu√°rios √≥rf√£os (existem no Auth mas n√£o na tabela)
    const tableUserIds = new Set(tableUsers.map(u => u.id))
    const orphanUsers = authUsers.users.filter(u => !tableUserIds.has(u.id))
    
    console.log(`\n3Ô∏è‚É£ Encontrados ${orphanUsers.length} usu√°rios √≥rf√£os`)
    
    if (orphanUsers.length === 0) {
      console.log('‚úÖ N√£o h√° usu√°rios √≥rf√£os para corrigir!')
      return
    }
    
    // 4. Criar registros na tabela users para usu√°rios √≥rf√£os
    console.log('\n4Ô∏è‚É£ Criando registros na tabela users...')
    
    let sucessos = 0
    let erros = 0
    
    for (const authUser of orphanUsers) {
      try {
        const userData = {
          id: authUser.id,
          email: authUser.email,
          nome: authUser.user_metadata?.nome || 
                authUser.raw_user_meta_data?.nome || 
                authUser.email.split('@')[0],
          is_admin: false,
          onboarding_completed: false,
          created_at: authUser.created_at,
          updated_at: new Date().toISOString()
        }
        
        const { error: insertError } = await supabase
          .from('users')
          .insert(userData)
        
        if (insertError) {
          console.log(`‚ùå Erro ao criar usu√°rio ${authUser.email}:`, insertError.message)
          erros++
        } else {
          console.log(`‚úÖ Usu√°rio criado: ${authUser.email}`)
          sucessos++
        }
        
        // Pequena pausa para evitar rate limiting
        await new Promise(resolve => setTimeout(resolve, 100))
        
      } catch (error) {
        console.log(`‚ùå Erro inesperado para ${authUser.email}:`, error.message)
        erros++
      }
    }
    
    console.log(`\nüìä RESULTADO:`)
    console.log(`   ‚úÖ Sucessos: ${sucessos}`)
    console.log(`   ‚ùå Erros: ${erros}`)
    
    // 5. Verificar se o trigger est√° funcionando
    console.log('\n5Ô∏è‚É£ Testando trigger para novos usu√°rios...')
    
    const testEmail = `teste.trigger.${Date.now()}@example.com`
    const testPassword = 'TesteSeguro123!'
    
    console.log(`üìß Criando usu√°rio de teste: ${testEmail}`)
    
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          nome: 'Teste Trigger'
        }
      }
    })
    
    if (signUpError) {
      console.log('‚ùå Erro ao criar usu√°rio de teste:', signUpError.message)
    } else if (signUpData.user) {
      console.log('‚úÖ Usu√°rio criado no Auth')
      
      // Aguardar trigger
      console.log('‚è≥ Aguardando 3 segundos para o trigger...')
      await new Promise(resolve => setTimeout(resolve, 3000))
      
      // Verificar se foi criado na tabela
      const { data: newUserData, error: newUserError } = await supabase
        .from('users')
        .select('*')
        .eq('id', signUpData.user.id)
        .single()
      
      if (newUserError || !newUserData) {
        console.log('‚ùå PROBLEMA: Trigger n√£o est√° funcionando!')
        console.log('   O usu√°rio n√£o foi criado automaticamente na tabela users')
        console.log('   Isso pode causar problemas de login para novos usu√°rios')
        
        // Criar manualmente para n√£o deixar √≥rf√£o
        const { error: manualError } = await supabase
          .from('users')
          .insert({
            id: signUpData.user.id,
            email: testEmail,
            nome: 'Teste Trigger',
            is_admin: false,
            onboarding_completed: false
          })
        
        if (!manualError) {
          console.log('‚úÖ Usu√°rio criado manualmente')
        }
      } else {
        console.log('‚úÖ Trigger funcionando corretamente!')
      }
      
      // Limpar usu√°rio de teste
      await supabase.auth.admin.deleteUser(signUpData.user.id)
      await supabase.from('users').delete().eq('id', signUpData.user.id)
      console.log('üßπ Usu√°rio de teste removido')
    }
    
    // 6. Testar login com usu√°rio real
    console.log('\n6Ô∏è‚É£ Testando login com usu√°rio real...')
    
    // Pegar um usu√°rio que agora deve existir em ambas as tabelas
    const { data: testUsers, error: testUsersError } = await supabase
      .from('users')
      .select('id, email')
      .limit(1)
    
    if (testUsersError || !testUsers || testUsers.length === 0) {
      console.log('‚ùå N√£o foi poss√≠vel encontrar usu√°rio para teste de login')
    } else {
      const testUser = testUsers[0]
      console.log(`üß™ Testando com usu√°rio: ${testUser.email}`)
      
      // Verificar se o usu√°rio existe no Auth
      const { data: authUser, error: authUserError } = await supabase.auth.admin.getUserById(testUser.id)
      
      if (authUserError || !authUser.user) {
        console.log('‚ùå Usu√°rio n√£o encontrado no Auth')
      } else {
        console.log('‚úÖ Usu√°rio existe em ambas as tabelas')
        console.log('   O login deve funcionar corretamente agora')
      }
    }
    
    console.log('\nüéâ CORRE√á√ÉO CONCLU√çDA!')
    console.log('\nüìã PR√ìXIMOS PASSOS:')
    console.log('1. Teste o login no frontend')
    console.log('2. Se ainda houver problemas, verifique:')
    console.log('   - Se o trigger est√° ativo no Supabase')
    console.log('   - Se as pol√≠ticas RLS est√£o corretas')
    console.log('   - Se n√£o h√° erros no console do navegador')
    
  } catch (error) {
    console.error('‚ùå Erro durante corre√ß√£o:', error.message)
  }
}

// Executar corre√ß√£o
corrigirUsuariosOrfaos().catch(console.error)