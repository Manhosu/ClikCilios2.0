import { supabase } from './supabase';
import type { Session, User } from '@supabase/supabase-js';

/**
 * Cliente de autentica√ß√£o centralizado com refresh autom√°tico de tokens
 * Gerencia sess√µes, renova√ß√£o de tokens e intercepta√ß√£o de requisi√ß√µes
 */
class AuthClient {
  private static instance: AuthClient;
  private session: Session | null = null;
  private refreshPromise: Promise<Session | null> | null = null;
  private isRefreshing = false;

  private constructor() {
    this.initializeAuthListener();
  }

  /**
   * Singleton pattern para garantir uma √∫nica inst√¢ncia
   */
  public static getInstance(): AuthClient {
    if (!AuthClient.instance) {
      AuthClient.instance = new AuthClient();
    }
    return AuthClient.instance;
  }

  /**
   * Inicializa o listener de mudan√ßas de estado de autentica√ß√£o
   * Atualiza automaticamente a sess√£o quando h√° mudan√ßas
   */
  private initializeAuthListener(): void {
    supabase.auth.onAuthStateChange(async (event, session) => {
      console.log('üîÑ [AuthClient] Estado de autentica√ß√£o alterado:', event, session?.user?.email);
      
      this.session = session;
      
      // Armazena tokens no localStorage para persist√™ncia
      if (session) {
        console.log(`‚úÖ [AuthClient] Sess√£o armazenada - Expira em: ${new Date(session.expires_at! * 1000).toLocaleString()}`);
        localStorage.setItem('supabase_session', JSON.stringify({
          access_token: session.access_token,
          refresh_token: session.refresh_token,
          expires_at: session.expires_at,
          user: session.user
        }));
      } else {
        console.log('üóëÔ∏è [AuthClient] Sess√£o removida do localStorage');
        localStorage.removeItem('supabase_session');
      }

      // Reset refresh state quando sess√£o muda
      this.isRefreshing = false;
      this.refreshPromise = null;
    });
  }

  /**
   * Obt√©m a sess√£o atual
   */
  public async getCurrentSession(): Promise<Session | null> {
    if (!this.session) {
      const { data: { session } } = await supabase.auth.getSession();
      this.session = session;
    }
    return this.session;
  }

  /**
   * Obt√©m o usu√°rio atual
   */
  public async getCurrentUser(): Promise<User | null> {
    const session = await this.getCurrentSession();
    return session?.user || null;
  }

  /**
   * Verifica se o token de acesso est√° v√°lido
   */
  private isTokenValid(session: Session): boolean {
    if (!session.expires_at || !session.access_token) return false;
    
    const now = Math.floor(Date.now() / 1000);
    const expiresAt = session.expires_at;
    
    // Considera token inv√°lido se expira em menos de 2 minutos (reduzido para ser mais conservador)
    return expiresAt > (now + 120);
  }

  /**
   * Renova a sess√£o usando o refresh token
   */
  private async refreshSession(): Promise<Session | null> {
    try {
      console.log('üîÑ Renovando sess√£o...');
      
      // Timeout para refresh de sess√£o (3 segundos)
      const refreshPromise = supabase.auth.refreshSession();
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout ao renovar sess√£o')), 3000);
      });

      const { data, error } = await Promise.race([
        refreshPromise,
        timeoutPromise
      ]) as any;
      
      if (error) {
        console.error('‚ùå Erro ao renovar sess√£o:', error);
        throw error;
      }

      if (data.session && this.isTokenValid(data.session)) {
        console.log('‚úÖ Sess√£o renovada com sucesso');
        this.session = data.session;
        return data.session;
      }

      throw new Error('Sess√£o renovada inv√°lida ou expirada');
    } catch (error) {
      console.error('‚ùå Falha ao renovar sess√£o:', error);
      // Limpa sess√£o inv√°lida
      this.session = null;
      localStorage.removeItem('supabase_session');
      throw error;
    }
  }

  /**
   * Obt√©m uma sess√£o v√°lida, renovando se necess√°rio
   */
  public async getValidSession(): Promise<Session | null> {
    const currentSession = await this.getCurrentSession();
    
    if (!currentSession) {
      console.log('No current session found');
      return null;
    }

    // Se token ainda √© v√°lido, retorna sess√£o atual
    if (this.isTokenValid(currentSession)) {
      return currentSession;
    }

    // Se j√° est√° renovando, aguarda o resultado
    if (this.isRefreshing && this.refreshPromise) {
      console.log('Refresh already in progress, waiting...');
      return await this.refreshPromise;
    }

    // Inicia processo de renova√ß√£o
    this.isRefreshing = true;
    this.refreshPromise = this.refreshSession();

    try {
      const refreshedSession = await this.refreshPromise;
      this.isRefreshing = false;
      return refreshedSession;
    } catch (error) {
      this.isRefreshing = false;
      this.refreshPromise = null;
      throw error;
    }
  }

  /**
   * Implementa retry com backoff exponencial
   */
  private async retryWithBackoff<T>(
    fn: () => Promise<T>,
    maxRetries: number = 3,
    baseDelay: number = 1000
  ): Promise<T> {
    let lastError: Error;
    
    for (let attempt = 0; attempt <= maxRetries; attempt++) {
      try {
        return await fn();
      } catch (error: any) {
        lastError = error;
        
        // N√£o fazer retry para erros de autentica√ß√£o ou √∫ltimas tentativas
        if (attempt === maxRetries || error.status === 401 || error.status === 403) {
          throw error;
        }
        
        // Calcular delay com backoff exponencial
        const delay = baseDelay * Math.pow(2, attempt);
        console.log(`üîÑ Tentativa ${attempt + 1} falhou, tentando novamente em ${delay}ms...`);
        
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
    
    throw lastError!;
  }

  /**
   * Interceptador de requisi√ß√µes que garante token v√°lido
   */
  public async makeAuthenticatedRequest<T>(
    requestFn: (token: string) => Promise<T>
  ): Promise<T> {
    return this.retryWithBackoff(async () => {
      const session = await this.getValidSession();
      
      if (!session) {
        throw new Error('No valid session available');
      }

      try {
        return await requestFn(session.access_token);
      } catch (error: any) {
        // Se erro 401, tenta renovar sess√£o uma vez
        if (error.status === 401 || error.message?.includes('401')) {
          console.log('üîÑ Erro 401 detectado, tentando renovar sess√£o...');
          
          const refreshedSession = await this.refreshSession();
          if (refreshedSession) {
            return await requestFn(refreshedSession.access_token);
          }
          
          // Se refresh falhar, redireciona para login
          this.redirectToLogin();
          throw new Error('Sess√£o expirada e renova√ß√£o falhou');
        }
        
        throw error;
      }
    }, 2); // M√°ximo 2 tentativas para requisi√ß√µes autenticadas
  }

  /**
   * Faz logout do usu√°rio
   */
  public async signOut(): Promise<void> {
    try {
      await supabase.auth.signOut();
      this.session = null;
      localStorage.removeItem('supabase_session');
    } catch (error) {
      console.error('Error signing out:', error);
    }
  }

  /**
   * Redireciona para p√°gina de login
   */
  private redirectToLogin(): void {
    // Remove dados de sess√£o
    this.session = null;
    localStorage.removeItem('supabase_session');
    
    // Redireciona para login (ajustar conforme roteamento da aplica√ß√£o)
    if (typeof window !== 'undefined') {
      window.location.href = '/login';
    }
  }

  /**
   * Verifica se usu√°rio est√° autenticado (vers√£o s√≠ncrona para uso r√°pido)
   */
  public isAuthenticated(): boolean {
    return !!(this.session && this.isTokenValid(this.session));
  }

  /**
   * Verifica se usu√°rio est√° autenticado (vers√£o ass√≠ncrona com valida√ß√£o completa)
   */
  public async isAuthenticatedAsync(): Promise<boolean> {
    try {
      const session = await this.getValidSession();
      return !!session;
    } catch {
      return false;
    }
  }

  /**
   * Obt√©m token de acesso v√°lido
   */
  public async getAccessToken(): Promise<string | null> {
    try {
      const session = await this.getValidSession();
      return session?.access_token || null;
    } catch {
      return null;
    }
  }
}

// Exporta inst√¢ncia singleton
export const authClient = AuthClient.getInstance();
export default authClient;