const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
);

async function testarAuthClientes() {
  console.log('üîç TESTANDO AUTENTICA√á√ÉO E CRIA√á√ÉO DE CLIENTES');
  console.log('===============================================');
  
  console.log('\n1. Verificando usu√°rio autenticado atual...');
  try {
    const { data: { user }, error } = await supabase.auth.getUser();
    
    if (error) {
      console.log('‚ùå Erro ao verificar usu√°rio:', error.message);
    } else if (user) {
      console.log('‚úÖ Usu√°rio autenticado:', {
        id: user.id,
        email: user.email
      });
      
      // Testar cria√ß√£o de cliente com usu√°rio real
      console.log('\n2. Testando cria√ß√£o de cliente com usu√°rio autenticado...');
      await testarCriacaoCliente(user.id);
    } else {
      console.log('‚ùå Nenhum usu√°rio autenticado');
      console.log('\nüîß SOLU√á√ÉO:');
      console.log('1. Fa√ßa login na aplica√ß√£o primeiro');
      console.log('2. Certifique-se de que est√° autenticado');
      console.log('3. Tente criar o cliente novamente');
    }
  } catch (error) {
    console.log('‚ùå Erro na verifica√ß√£o de autentica√ß√£o:', error.message);
  }
  
  console.log('\n3. Verificando se existe algum usu√°rio na tabela auth.users...');
  try {
    const { data, error } = await supabase
      .from('users')
      .select('id, email')
      .limit(5);
    
    if (error) {
      console.log('‚ùå Erro ao verificar usu√°rios:', error.message);
    } else {
      console.log('‚úÖ Usu√°rios encontrados na tabela users:', data.length);
      if (data.length > 0) {
        console.log('Primeiros usu√°rios:', data);
        
        // Testar com o primeiro usu√°rio encontrado
        console.log('\n4. Testando cria√ß√£o de cliente com primeiro usu√°rio encontrado...');
        await testarCriacaoCliente(data[0].id);
      }
    }
  } catch (error) {
    console.log('‚ùå Erro na verifica√ß√£o de usu√°rios:', error.message);
  }
  
  console.log('\n===============================================');
  console.log('üèÅ TESTE CONCLU√çDO');
}

async function testarCriacaoCliente(userId) {
  try {
    const dadosCliente = {
      user_id: userId,
      nome: 'Cliente Teste Auth',
      email: 'teste.auth@exemplo.com',
      telefone: '11987654321',
      data_nascimento: '1985-05-15',
      observacoes: 'Cliente criado para teste de autentica√ß√£o'
    };
    
    console.log('Tentando criar cliente para user_id:', userId);
    
    const { data, error } = await supabase
      .from('clientes')
      .insert(dadosCliente)
      .select()
      .single();
    
    if (error) {
      console.log('‚ùå ERRO na cria√ß√£o:', {
        message: error.message,
        details: error.details,
        hint: error.hint,
        code: error.code
      });
      
      if (error.code === '42501') {
        console.log('\nüîß DIAGN√ìSTICO:');
        console.log('- Erro 42501 = Viola√ß√£o de pol√≠tica RLS');
        console.log('- A pol√≠tica RLS exige auth.uid() = user_id');
        console.log('- Mas auth.uid() est√° retornando NULL ou valor diferente');
        console.log('\nüí° SOLU√á√ïES:');
        console.log('1. Execute o SQL corrigir-tabela-clientes.sql no Supabase Dashboard');
        console.log('2. Fa√ßa login na aplica√ß√£o web');
        console.log('3. Tente criar o cliente atrav√©s da interface da aplica√ß√£o');
      }
    } else {
      console.log('‚úÖ Cliente criado com sucesso:', data);
      
      // Limpar cliente de teste
      const { error: deleteError } = await supabase
        .from('clientes')
        .delete()
        .eq('id', data.id);
      
      if (!deleteError) {
        console.log('‚úÖ Cliente de teste removido');
      }
    }
  } catch (error) {
    console.log('‚ùå Erro na fun√ß√£o de teste:', error.message);
  }
}

testarAuthClientes().catch(console.error);