const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

// Cliente admin
const adminClient = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

// Cliente normal
const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
)

async function forcarRemocaoEduardo() {
  console.log('üîß For√ßando remo√ß√£o e recria√ß√£o do usu√°rio Eduardo...')
  console.log('')
  
  const email = 'eduardogelista@gmail.com'
  const senha = 'ClikCilios2024!'
  const nome = 'Eduardo'
  
  try {
    // 1. Listar TODOS os usu√°rios com pagina√ß√£o
    console.log('üîç Listando TODOS os usu√°rios...')
    let allUsers = []
    let page = 1
    let hasMore = true
    
    while (hasMore) {
      const { data: usersData, error: listError } = await adminClient.auth.admin.listUsers({
        page: page,
        perPage: 1000
      })
      
      if (listError) {
        console.log('‚ùå Erro ao listar usu√°rios:', listError.message)
        break
      }
      
      allUsers = allUsers.concat(usersData.users)
      hasMore = usersData.users.length === 1000
      page++
      
      console.log(`   P√°gina ${page - 1}: ${usersData.users.length} usu√°rios`)
    }
    
    console.log(`üìä Total de usu√°rios encontrados: ${allUsers.length}`)
    console.log('')
    
    // 2. Procurar Eduardo em todos os usu√°rios
    const eduardoUsers = allUsers.filter(u => 
      u.email === email || 
      u.email?.toLowerCase().includes('eduardo') ||
      u.user_metadata?.name?.toLowerCase().includes('eduardo')
    )
    
    console.log(`üîç Usu√°rios relacionados ao Eduardo: ${eduardoUsers.length}`)
    
    for (const user of eduardoUsers) {
      console.log(`   - ID: ${user.id}`)
      console.log(`     Email: ${user.email}`)
      console.log(`     Nome: ${user.user_metadata?.name || 'N/A'}`)
      console.log(`     Criado: ${user.created_at}`)
      console.log(`     Confirmado: ${user.email_confirmed_at ? 'Sim' : 'N√£o'}`)
      console.log('')
      
      if (user.email === email) {
        console.log('üóëÔ∏è Deletando usu√°rio Eduardo...')
        const { error: deleteError } = await adminClient.auth.admin.deleteUser(user.id)
        
        if (deleteError) {
          console.log('‚ùå Erro ao deletar:', deleteError.message)
        } else {
          console.log('‚úÖ Usu√°rio deletado!')
        }
      }
    }
    
    // 3. Limpar tabela users tamb√©m
    console.log('üóëÔ∏è Limpando tabela users...')
    const { error: deleteTableError } = await supabase
      .from('users')
      .delete()
      .eq('email', email)
    
    if (deleteTableError) {
      console.log('‚ö†Ô∏è Erro ao limpar tabela users:', deleteTableError.message)
    } else {
      console.log('‚úÖ Tabela users limpa!')
    }
    
    // 4. Aguardar mais tempo
    console.log('‚è≥ Aguardando 5 segundos para propaga√ß√£o...')
    await new Promise(resolve => setTimeout(resolve, 5000))
    
    // 5. Tentar criar usu√°rio novamente
    console.log('üë§ Tentando criar usu√°rio Eduardo...')
    
    // Primeiro tentar com signup normal
    const { data: signupData, error: signupError } = await supabase.auth.signUp({
      email: email,
      password: senha,
      options: {
        data: {
          name: nome
        }
      }
    })
    
    if (signupError) {
      console.log('‚ùå Signup normal falhou:', signupError.message)
      
      // Tentar com admin API
      console.log('üîß Tentando com admin API...')
      const { data: adminData, error: adminError } = await adminClient.auth.admin.createUser({
        email: email,
        password: senha,
        email_confirm: true,
        user_metadata: {
          name: nome
        }
      })
      
      if (adminError) {
        console.log('‚ùå Admin API tamb√©m falhou:', adminError.message)
        
        // √öltima tentativa: usar um email ligeiramente diferente
        const tempEmail = 'eduardo.teste@gmail.com'
        console.log(`üîß √öltima tentativa com email tempor√°rio: ${tempEmail}`)
        
        const { data: tempData, error: tempError } = await adminClient.auth.admin.createUser({
          email: tempEmail,
          password: senha,
          email_confirm: true,
          user_metadata: {
            name: nome,
            original_email: email
          }
        })
        
        if (tempError) {
          console.log('‚ùå Todas as tentativas falharam:', tempError.message)
        } else {
          console.log('‚úÖ Usu√°rio criado com email tempor√°rio!')
          console.log(`   Use: ${tempEmail} / ${senha}`)
          
          // Inserir na tabela users
          await supabase.from('users').insert({
            id: tempData.user.id,
            email: tempEmail,
            name: nome,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          })
        }
      } else {
        console.log('‚úÖ Usu√°rio criado com admin API!')
        console.log(`   ID: ${adminData.user.id}`)
        
        // Inserir na tabela users
        await supabase.from('users').insert({
          id: adminData.user.id,
          email: email,
          name: nome,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
      }
    } else {
      console.log('‚úÖ Usu√°rio criado com signup normal!')
      console.log(`   ID: ${signupData.user?.id}`)
      
      if (signupData.user?.id) {
        // Confirmar email
        await adminClient.auth.admin.updateUserById(signupData.user.id, {
          email_confirm: true
        })
        
        // Inserir na tabela users
        await supabase.from('users').insert({
          id: signupData.user.id,
          email: email,
          name: nome,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
      }
    }
    
    // 6. Testar login final
    console.log('')
    console.log('üß™ Testando login final...')
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: email,
      password: senha
    })
    
    if (loginError) {
      console.log('‚ùå Login ainda n√£o funciona:', loginError.message)
      
      // Testar com email tempor√°rio se foi criado
      const { data: tempLogin, error: tempLoginError } = await supabase.auth.signInWithPassword({
        email: 'eduardo.teste@gmail.com',
        password: senha
      })
      
      if (tempLogin && tempLogin.user) {
        console.log('‚úÖ Login funciona com email tempor√°rio!')
        console.log(`   Use: eduardo.teste@gmail.com / ${senha}`)
      }
    } else {
      console.log('‚úÖ LOGIN FUNCIONOU PERFEITAMENTE!')
      console.log(`   Usu√°rio: ${loginData.user.email}`)
      await supabase.auth.signOut()
    }
    
  } catch (error) {
    console.log('‚ùå Erro geral:', error.message)
  }
  
  console.log('')
  console.log('üìã CREDENCIAIS PARA TESTE:')
  console.log(`   üìß Email: ${email} (ou eduardo.teste@gmail.com)`)
  console.log(`   üîê Senha: ${senha}`)
  console.log(`   üåê URL: https://clik-cilios2-0.vercel.app/login`)
}

// Executar
forcarRemocaoEduardo().catch(console.error)