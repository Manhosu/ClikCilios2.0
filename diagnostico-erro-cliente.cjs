require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
);

const supabaseService = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function diagnosticarErroCliente() {
  console.log('üîç DIAGN√ìSTICO COMPLETO DO ERRO DE CRIA√á√ÉO DE CLIENTE');
  console.log('=========================================================');

  try {
    // 1. Verificar conex√£o com Supabase
    console.log('1. Verificando conex√£o com Supabase...');
    const { data: healthCheck, error: healthError } = await supabase
      .from('users')
      .select('count')
      .limit(1);

    if (healthError) {
      console.log('‚ùå Erro de conex√£o:', healthError.message);
      return;
    }
    console.log('‚úÖ Conex√£o com Supabase OK');

    // 2. Verificar se a tabela users tem dados (usando service role)
    console.log('\n2. Verificando dados na tabela users (service role)...');
    const { data: usersService, error: usersServiceError } = await supabaseService
      .from('users')
      .select('id, email, nome')
      .limit(3);

    if (usersServiceError) {
      console.log('‚ùå Erro ao acessar users com service role:', usersServiceError.message);
    } else {
      console.log('‚úÖ Usu√°rios encontrados (service role):', usersService.length);
      usersService.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.email} (${user.nome})`);
      });
    }

    // 3. Verificar se a tabela users tem dados (usando anon key)
    console.log('\n3. Verificando dados na tabela users (anon key)...');
    const { data: usersAnon, error: usersAnonError } = await supabase
      .from('users')
      .select('id, email, nome')
      .limit(3);

    if (usersAnonError) {
      console.log('‚ùå Erro ao acessar users com anon key:', usersAnonError.message);
    } else {
      console.log('‚úÖ Usu√°rios encontrados (anon key):', usersAnon.length);
      if (usersAnon.length === 0) {
        console.log('‚ö†Ô∏è PROBLEMA: Pol√≠ticas RLS est√£o bloqueando acesso via anon key');
      }
    }

    // 4. Verificar se a tabela clientes existe
    console.log('\n4. Verificando exist√™ncia da tabela clientes...');
    const { data: clientesTest, error: clientesError } = await supabase
      .from('clientes')
      .select('*')
      .limit(1);

    if (clientesError) {
      console.log('‚ùå Erro ao acessar tabela clientes:', clientesError.message);
      if (clientesError.code === 'PGRST106') {
        console.log('üí° SOLU√á√ÉO: A tabela clientes n√£o existe. Execute corrigir-tabela-clientes.sql');
      }
    } else {
      console.log('‚úÖ Tabela clientes existe e √© acess√≠vel');
    }

    // 5. Testar autentica√ß√£o
    console.log('\n5. Verificando estado de autentica√ß√£o...');
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.log('‚ùå Erro ao verificar sess√£o:', sessionError.message);
    } else if (!session) {
      console.log('‚ùå Nenhuma sess√£o ativa encontrada');
      console.log('üí° PROBLEMA: Usu√°rio n√£o est√° autenticado');
    } else {
      console.log('‚úÖ Sess√£o ativa encontrada');
      console.log('   Usu√°rio:', session.user.email);
      console.log('   ID:', session.user.id);
    }

    // 6. Testar cria√ß√£o de cliente com service role (se temos usu√°rios)
    if (usersService && usersService.length > 0) {
      console.log('\n6. Testando cria√ß√£o de cliente com service role...');
      const usuarioTeste = usersService[0];
      
      const clienteTeste = {
        user_id: usuarioTeste.id,
        nome: 'Cliente Teste Diagn√≥stico',
        email: 'diagnostico@teste.com',
        telefone: '(11) 99999-9999'
      };

      const { data: novoCliente, error: errorCriarCliente } = await supabaseService
        .from('clientes')
        .insert([clienteTeste])
        .select()
        .single();

      if (errorCriarCliente) {
        console.log('‚ùå Erro ao criar cliente (service role):', errorCriarCliente.message);
        console.log('   C√≥digo:', errorCriarCliente.code);
      } else {
        console.log('‚úÖ Cliente criado com sucesso (service role)!');
        console.log('   ID:', novoCliente.id);
        
        // Limpar cliente de teste
        await supabaseService.from('clientes').delete().eq('id', novoCliente.id);
        console.log('üßπ Cliente de teste removido');
      }
    }

  } catch (error) {
    console.log('‚ùå Erro geral:', error.message);
  }

  console.log('\n=========================================================');
  console.log('üèÅ DIAGN√ìSTICO CONCLU√çDO');
  console.log('\nüìã RESUMO DOS PROBLEMAS IDENTIFICADOS:');
  console.log('1. Se "Usu√°rios encontrados (anon key): 0" ‚Üí Problema nas pol√≠ticas RLS da tabela users');
  console.log('2. Se "Nenhuma sess√£o ativa" ‚Üí Usu√°rio precisa fazer login no frontend');
  console.log('3. Se "tabela clientes n√£o existe" ‚Üí Execute corrigir-tabela-clientes.sql');
  console.log('\nüí° SOLU√á√ïES:');
  console.log('1. Execute setup-trigger-manual.sql no Supabase Dashboard');
  console.log('2. Execute corrigir-tabela-clientes.sql no Supabase Dashboard');
  console.log('3. Fa√ßa login no frontend da aplica√ß√£o');
  console.log('4. Teste novamente a cria√ß√£o de clientes');
}

diagnosticarErroCliente();