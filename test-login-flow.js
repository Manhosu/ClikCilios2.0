import { createClient } from '@supabase/supabase-js';
import fetch from 'node-fetch';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://gguxeqpayaangiplggme.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdndXhlcXBheWFhbmdpcGxnZ21lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk4NDYwOTYsImV4cCI6MjA2NTQyMjA5Nn0.WHusG12ZcOYtVSGUQVUT3Vf-MIbu_O6hlc3ha7yVnSE';

const supabase = createClient(supabaseUrl, supabaseKey);

async function simulateLoginFlow() {
  console.log('üîÑ Simulando fluxo completo de login...');
  
  try {
    // 1. Simular inicializa√ß√£o da aplica√ß√£o
    console.log('\n1. üöÄ Inicializando aplica√ß√£o...');
    const startTime = Date.now();
    
    // Verificar sess√£o inicial (como faz o useAuth)
    const { data: session, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('‚ùå Erro na inicializa√ß√£o:', sessionError.message);
      return;
    }
    
    const initTime = Date.now() - startTime;
    console.log(`‚úÖ Inicializa√ß√£o conclu√≠da em ${initTime}ms`);
    
    // 2. Simular verifica√ß√£o de storage (como faz o fixSupabaseStorage)
    console.log('\n2. üîç Verificando storage...');
    const storageStartTime = Date.now();
    let storageTime = 0;
    
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error('‚ùå Erro ao verificar storage:', bucketsError.message);
      storageTime = Date.now() - storageStartTime;
    } else {
      storageTime = Date.now() - storageStartTime;
      console.log(`‚úÖ Storage verificado em ${storageTime}ms`);
      
      const mcpBucket = buckets?.find(b => b.name === 'mcp');
      if (!mcpBucket) {
        console.log('‚ö†Ô∏è Bucket MCP n√£o existe - seria criado automaticamente');
      }
    }
    
    // 3. Simular login com usu√°rio existente
    console.log('\n3. üîê Simulando login...');
    
    // Primeiro, buscar um usu√°rio real para testar
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('email')
      .limit(1);
    
    if (usersError || !users || users.length === 0) {
      console.log('‚ö†Ô∏è Nenhum usu√°rio encontrado para teste de login');
      return;
    }
    
    const testEmail = users[0].email;
    console.log(`Testando com email: ${testEmail}`);
    
    // Tentar login (vai falhar por n√£o termos a senha, mas testa a conectividade)
    const loginStartTime = Date.now();
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: testEmail,
      password: 'senha_teste_incorreta'
    });
    
    const loginTime = Date.now() - loginStartTime;
    
    if (loginError) {
      console.log(`‚úÖ Resposta de login em ${loginTime}ms: ${loginError.message}`);
    } else {
      console.log('‚ö†Ô∏è Login n√£o deveria ter funcionado');
    }
    
    // 4. Testar timeout e performance
    console.log('\n4. ‚è±Ô∏è Testando performance e timeouts...');
    
    // Teste de m√∫ltiplas requisi√ß√µes simult√¢neas
    const concurrentStartTime = Date.now();
    const promises = [];
    
    for (let i = 0; i < 5; i++) {
      promises.push(
        supabase.from('users').select('count').limit(1)
      );
    }
    
    try {
      await Promise.all(promises);
      const concurrentTime = Date.now() - concurrentStartTime;
      console.log(`‚úÖ 5 requisi√ß√µes simult√¢neas conclu√≠das em ${concurrentTime}ms`);
    } catch (error) {
      console.error('‚ùå Erro em requisi√ß√µes simult√¢neas:', error.message);
    }
    
    // 5. Testar cen√°rios de erro
    console.log('\n5. üö® Testando cen√°rios de erro...');
    
    // Teste com tabela inexistente
    const { data: invalidData, error: invalidError } = await supabase
      .from('tabela_inexistente')
      .select('*');
    
    if (invalidError) {
      console.log('‚úÖ Erro esperado para tabela inexistente:', invalidError.message);
    }
    
    // 6. Verificar APIs da aplica√ß√£o
    console.log('\n6. üåê Testando APIs da aplica√ß√£o...');
    
    const apiTests = [
      { endpoint: '/api/list-images', method: 'GET' },
      { endpoint: '/api/save-client-image', method: 'POST' }
    ];
    
    for (const test of apiTests) {
      try {
        const apiStartTime = Date.now();
        const response = await fetch(`http://localhost:3001${test.endpoint}`, {
          method: test.method,
          headers: {
            'Content-Type': 'application/json'
          },
          body: test.method === 'POST' ? JSON.stringify({}) : undefined
        });
        
        const apiTime = Date.now() - apiStartTime;
        const result = await response.text();
        
        console.log(`${test.endpoint} - Status: ${response.status}, Tempo: ${apiTime}ms`);
        
        if (response.status >= 500) {
          console.log('‚ö†Ô∏è Erro interno do servidor detectado');
        }
      } catch (error) {
        console.error(`‚ùå Erro ao testar ${test.endpoint}:`, error.message);
      }
    }
    
    console.log('\n‚úÖ Simula√ß√£o de fluxo de login conclu√≠da!');
    console.log('\nüìä Resumo dos tempos:');
    console.log(`- Inicializa√ß√£o: ${initTime}ms`);
    console.log(`- Verifica√ß√£o de storage: ${storageTime || 'N/A'}ms`);
    console.log(`- Resposta de login: ${loginTime}ms`);
    
    // Verificar se h√° tempos suspeitos
    if (initTime > 3000) {
      console.log('‚ö†Ô∏è ALERTA: Inicializa√ß√£o muito lenta (>3s)');
    }
    if (loginTime > 5000) {
      console.log('‚ö†Ô∏è ALERTA: Login muito lento (>5s)');
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral na simula√ß√£o:', error.message);
  }
}

// Executar a simula√ß√£o
simulateLoginFlow();