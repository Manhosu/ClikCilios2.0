// Script para configurar permiss√µes de storage no Supabase
// An√°lise e configura√ß√£o de seguran√ßa para arquivos JSON

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  console.log('Certifique-se de que VITE_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY est√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function analisarStorageAtual() {
  console.log('üîç Analisando configura√ß√£o atual do storage...');
  
  try {
    // Verificar buckets existentes
    const { data: buckets, error: bucketsError } = await supabase
      .from('storage.buckets')
      .select('*');
    
    if (bucketsError) {
      console.error('‚ùå Erro ao buscar buckets:', bucketsError.message);
      return;
    }
    
    console.log('üì¶ Buckets encontrados:', buckets.length);
    buckets.forEach(bucket => {
      console.log(`  - ${bucket.name} (p√∫blico: ${bucket.public})`);
    });
    
    // Verificar objetos existentes
    const { data: objects, error: objectsError } = await supabase
      .from('storage.objects')
      .select('*')
      .limit(10);
    
    if (objectsError) {
      console.error('‚ùå Erro ao buscar objetos:', objectsError.message);
    } else {
      console.log('üìÑ Objetos no storage:', objects.length);
      objects.forEach(obj => {
        console.log(`  - ${obj.name} (bucket: ${obj.bucket_id})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro na an√°lise:', error.message);
  }
}

async function criarBucketMCP() {
  console.log('\nüöÄ Criando bucket MCP...');
  
  try {
    const { data, error } = await supabase.storage.createBucket('mcp', {
      public: false, // Privado por seguran√ßa
      fileSizeLimit: 1024 * 1024 * 10, // 10MB
      allowedMimeTypes: ['application/json', 'text/plain']
    });
    
    if (error) {
      if (error.message.includes('already exists')) {
        console.log('‚úÖ Bucket MCP j√° existe');
      } else {
        console.error('‚ùå Erro ao criar bucket MCP:', error.message);
        return false;
      }
    } else {
      console.log('‚úÖ Bucket MCP criado com sucesso');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao criar bucket:', error.message);
    return false;
  }
}

async function configurarPoliticasRLS() {
  console.log('\nüîí Configurando pol√≠ticas RLS para storage...');
  
  const politicas = [
    {
      nome: 'mcp_bucket_select_policy',
      sql: `
        CREATE POLICY "mcp_bucket_select_policy" ON storage.objects
        FOR SELECT USING (
          bucket_id = 'mcp' AND 
          auth.role() = 'service_role'
        );
      `
    },
    {
      nome: 'mcp_bucket_insert_policy', 
      sql: `
        CREATE POLICY "mcp_bucket_insert_policy" ON storage.objects
        FOR INSERT WITH CHECK (
          bucket_id = 'mcp' AND 
          auth.role() = 'service_role'
        );
      `
    },
    {
      nome: 'mcp_bucket_update_policy',
      sql: `
        CREATE POLICY "mcp_bucket_update_policy" ON storage.objects
        FOR UPDATE USING (
          bucket_id = 'mcp' AND 
          auth.role() = 'service_role'
        );
      `
    },
    {
      nome: 'mcp_bucket_delete_policy',
      sql: `
        CREATE POLICY "mcp_bucket_delete_policy" ON storage.objects
        FOR DELETE USING (
          bucket_id = 'mcp' AND 
          auth.role() = 'service_role'
        );
      `
    }
  ];
  
  for (const politica of politicas) {
    try {
      console.log(`üìã Aplicando pol√≠tica: ${politica.nome}`);
      
      // Primeiro, remover pol√≠tica existente se houver
      await supabase.rpc('exec_sql', {
        query: `DROP POLICY IF EXISTS "${politica.nome}" ON storage.objects;`
      });
      
      // Criar nova pol√≠tica
      const { error } = await supabase.rpc('exec_sql', {
        query: politica.sql
      });
      
      if (error) {
        console.error(`‚ùå Erro ao criar pol√≠tica ${politica.nome}:`, error.message);
      } else {
        console.log(`‚úÖ Pol√≠tica ${politica.nome} aplicada`);
      }
    } catch (error) {
      console.error(`‚ùå Erro ao processar pol√≠tica ${politica.nome}:`, error.message);
    }
  }
}

async function testarPermissoes() {
  console.log('\nüß™ Testando permiss√µes do bucket MCP...');
  
  try {
    // Teste de upload de arquivo JSON
    const testData = {
      timestamp: new Date().toISOString(),
      test: 'configuracao_mcp',
      status: 'ativo'
    };
    
    const fileName = `test-${Date.now()}.json`;
    const { data, error } = await supabase.storage
      .from('mcp')
      .upload(fileName, JSON.stringify(testData, null, 2), {
        contentType: 'application/json'
      });
    
    if (error) {
      console.error('‚ùå Erro no teste de upload:', error.message);
    } else {
      console.log('‚úÖ Teste de upload bem-sucedido:', fileName);
      
      // Teste de download
      const { data: downloadData, error: downloadError } = await supabase.storage
        .from('mcp')
        .download(fileName);
      
      if (downloadError) {
        console.error('‚ùå Erro no teste de download:', downloadError.message);
      } else {
        console.log('‚úÖ Teste de download bem-sucedido');
        
        // Limpar arquivo de teste
        await supabase.storage.from('mcp').remove([fileName]);
        console.log('üßπ Arquivo de teste removido');
      }
    }
  } catch (error) {
    console.error('‚ùå Erro nos testes:', error.message);
  }
}

async function gerarRelatorioSeguranca() {
  console.log('\nüìä Gerando relat√≥rio de seguran√ßa...');
  
  const relatorio = {
    timestamp: new Date().toISOString(),
    buckets_analisados: [],
    politicas_aplicadas: [],
    recomendacoes: [
      'Manter bucket MCP como privado',
      'Restringir acesso apenas ao service role',
      'Monitorar uploads de arquivos JSON',
      'Implementar logs de auditoria',
      'Revisar permiss√µes periodicamente'
    ],
    proximos_passos: [
      'Configurar monitoramento de storage',
      'Implementar backup autom√°tico',
      'Definir pol√≠ticas de reten√ß√£o',
      'Configurar alertas de seguran√ßa'
    ]
  };
  
  console.log('\nüìã RELAT√ìRIO DE SEGURAN√áA:');
  console.log('================================');
  console.log('üîí Status: Bucket MCP configurado com seguran√ßa');
  console.log('üõ°Ô∏è  Acesso: Restrito ao service role');
  console.log('üìÅ Tipos permitidos: JSON, texto');
  console.log('üìè Limite de tamanho: 10MB');
  
  console.log('\nüéØ RECOMENDA√á√ïES:');
  relatorio.recomendacoes.forEach((rec, i) => {
    console.log(`${i + 1}. ${rec}`);
  });
  
  console.log('\nüìã PR√ìXIMOS PASSOS:');
  relatorio.proximos_passos.forEach((passo, i) => {
    console.log(`${i + 1}. ${passo}`);
  });
  
  return relatorio;
}

async function main() {
  console.log('üöÄ Iniciando configura√ß√£o de permiss√µes do storage MCP...');
  console.log('=' .repeat(60));
  
  try {
    await analisarStorageAtual();
    
    const bucketCriado = await criarBucketMCP();
    if (!bucketCriado) {
      console.log('‚ö†Ô∏è  Continuando sem criar novo bucket...');
    }
    
    await configurarPoliticasRLS();
    await testarPermissoes();
    const relatorio = await gerarRelatorioSeguranca();
    
    console.log('\n‚úÖ Configura√ß√£o conclu√≠da com sucesso!');
    console.log('\nüìù RESUMO:');
    console.log('- Bucket MCP configurado com seguran√ßa');
    console.log('- Pol√≠ticas RLS aplicadas');
    console.log('- Permiss√µes testadas');
    console.log('- Relat√≥rio de seguran√ßa gerado');
    
  } catch (error) {
    console.error('‚ùå Erro na execu√ß√£o:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = {
  analisarStorageAtual,
  criarBucketMCP,
  configurarPoliticasRLS,
  testarPermissoes,
  gerarRelatorioSeguranca
};