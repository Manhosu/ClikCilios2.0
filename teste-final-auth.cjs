const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseServiceKey || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o configuradas')
  process.exit(1)
}

const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey)
const supabaseClient = createClient(supabaseUrl, supabaseAnonKey)

async function testeFinalAuth() {
  console.log('üéØ TESTE FINAL - VERIFICA√á√ÉO COMPLETA DA AUTENTICA√á√ÉO')
  console.log('=' .repeat(60))
  
  let testsPassed = 0
  let totalTests = 0
  
  try {
    // Teste 1: Verificar se RLS est√° funcionando sem recurs√£o
    console.log('\n1Ô∏è‚É£ Testando RLS sem recurs√£o...')
    totalTests++
    
    try {
      const { data, error } = await supabaseClient
        .from('users')
        .select('count')
        .limit(1)
      
      if (error && error.message.includes('infinite recursion')) {
        console.log('‚ùå AINDA H√Å RECURS√ÉO INFINITA!')
        console.log('   Execute manualmente o arquivo fix-rls-final.sql no painel do Supabase')
      } else {
        console.log('‚úÖ RLS funcionando sem recurs√£o')
        testsPassed++
      }
    } catch (error) {
      console.log('‚ùå Erro no teste RLS:', error.message)
    }
    
    // Teste 2: Criar novo usu√°rio e verificar trigger
    console.log('\n2Ô∏è‚É£ Testando cria√ß√£o de usu√°rio e trigger...')
    totalTests++
    
    const testEmail = `teste.final.${Date.now()}@example.com`
    const testPassword = 'TesteSeguro123!'
    const testNome = 'Usu√°rio Teste Final'
    
    console.log(`üìß Criando usu√°rio: ${testEmail}`)
    
    const { data: signUpData, error: signUpError } = await supabaseClient.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          nome: testNome
        }
      }
    })
    
    if (signUpError) {
      console.log('‚ùå Erro ao criar usu√°rio:', signUpError.message)
    } else if (signUpData.user) {
      console.log('‚úÖ Usu√°rio criado no Auth:', signUpData.user.id)
      
      // Confirmar email
      await supabaseAdmin.auth.admin.updateUserById(
        signUpData.user.id,
        { email_confirm: true }
      )
      
      // Aguardar trigger
      console.log('‚è≥ Aguardando 3 segundos para o trigger...')
      await new Promise(resolve => setTimeout(resolve, 3000))
      
      // Verificar se foi criado na tabela
      const { data: newUserData, error: newUserError } = await supabaseAdmin
        .from('users')
        .select('*')
        .eq('id', signUpData.user.id)
        .single()
      
      if (newUserError || !newUserData) {
        console.log('‚ö†Ô∏è  Trigger n√£o funcionou, criando manualmente...')
        
        const { error: manualError } = await supabaseAdmin
          .from('users')
          .insert({
            id: signUpData.user.id,
            email: testEmail,
            nome: testNome,
            is_admin: false,
            onboarding_completed: false
          })
        
        if (manualError) {
          console.log('‚ùå Erro ao criar manualmente:', manualError.message)
        } else {
          console.log('‚úÖ Usu√°rio criado manualmente na tabela')
          testsPassed++
        }
      } else {
        console.log('‚úÖ Trigger funcionando! Usu√°rio criado automaticamente')
        testsPassed++
      }
      
      // Teste 3: Login completo
      console.log('\n3Ô∏è‚É£ Testando login completo...')
      totalTests++
      
      const { data: loginData, error: loginError } = await supabaseClient.auth.signInWithPassword({
        email: testEmail,
        password: testPassword
      })
      
      if (loginError) {
        console.log('‚ùå Erro no login:', loginError.message)
      } else if (loginData.user) {
        console.log('‚úÖ Login realizado com sucesso!')
        
        // Teste 4: Carregamento do perfil (CR√çTICO - aqui estava o loop)
        console.log('\n4Ô∏è‚É£ Testando carregamento do perfil (CR√çTICO)...')
        totalTests++
        
        const { data: profileData, error: profileError } = await supabaseClient
          .from('users')
          .select('*')
          .eq('id', loginData.user.id)
          .single()
        
        if (profileError) {
          console.log('‚ùå ERRO CR√çTICO ao carregar perfil:', profileError.message)
          if (profileError.message.includes('infinite recursion')) {
            console.log('üö® RECURS√ÉO INFINITA AINDA PRESENTE!')
            console.log('   EXECUTE MANUALMENTE: fix-rls-final.sql')
          }
        } else {
          console.log('‚úÖ PERFIL CARREGADO COM SUCESSO!')
          console.log('   Nome:', profileData.nome)
          console.log('   Admin:', profileData.is_admin)
          console.log('   üéâ PROBLEMA DO LOOP RESOLVIDO!')
          testsPassed++
        }
        
        // Teste 5: Logout
        console.log('\n5Ô∏è‚É£ Testando logout...')
        totalTests++
        
        const { error: logoutError } = await supabaseClient.auth.signOut()
        
        if (logoutError) {
          console.log('‚ùå Erro no logout:', logoutError.message)
        } else {
          console.log('‚úÖ Logout realizado com sucesso!')
          testsPassed++
        }
      }
      
      // Limpar usu√°rio de teste
      console.log('\nüßπ Limpando usu√°rio de teste...')
      await supabaseAdmin.auth.admin.deleteUser(signUpData.user.id)
      await supabaseAdmin.from('users').delete().eq('id', signUpData.user.id)
      console.log('‚úÖ Usu√°rio de teste removido')
    }
    
    // Teste 6: Verificar usu√°rios existentes
    console.log('\n6Ô∏è‚É£ Verificando usu√°rios existentes...')
    totalTests++
    
    const { data: authUsers, error: authError } = await supabaseAdmin.auth.admin.listUsers()
    const { data: tableUsers, error: tableError } = await supabaseAdmin
      .from('users')
      .select('id, email')
    
    if (authError || tableError) {
      console.log('‚ùå Erro ao verificar usu√°rios existentes')
    } else {
      const tableUserIds = new Set(tableUsers.map(u => u.id))
      const orphanUsers = authUsers.users.filter(u => !tableUserIds.has(u.id))
      
      if (orphanUsers.length > 0) {
        console.log(`‚ö†Ô∏è  ${orphanUsers.length} usu√°rios √≥rf√£os ainda existem`)
        console.log('   Execute: node corrigir-usuarios-orfaos.cjs')
      } else {
        console.log('‚úÖ Todos os usu√°rios est√£o sincronizados')
        testsPassed++
      }
    }
    
    // Resultado final
    console.log('\nüìä RESULTADO FINAL DOS TESTES')
    console.log('=' .repeat(50))
    
    const successRate = (testsPassed / totalTests * 100).toFixed(1)
    
    console.log(`\nüìà TAXA DE SUCESSO: ${testsPassed}/${totalTests} (${successRate}%)`)
    
    if (testsPassed === totalTests) {
      console.log('\nüéâ TODOS OS TESTES PASSARAM!')
      console.log('‚úÖ Sistema de autentica√ß√£o funcionando corretamente')
      console.log('‚úÖ Loop de login resolvido')
      console.log('‚úÖ Cria√ß√£o de usu√°rios funcionando')
      
      console.log('\nüöÄ PR√ìXIMOS PASSOS:')
      console.log('1. Teste o login no frontend')
      console.log('2. Verifique se n√£o h√° mais loops')
      console.log('3. Teste cria√ß√£o de novos usu√°rios')
      console.log('4. Sistema pronto para produ√ß√£o!')
    } else {
      console.log('\n‚ö†Ô∏è  ALGUNS TESTES FALHARAM')
      
      if (testsPassed < 3) {
        console.log('\nüîß A√á√ïES NECESS√ÅRIAS:')
        console.log('1. Execute manualmente no painel do Supabase:')
        console.log('   - fix-rls-final.sql (para corrigir RLS)')
        console.log('   - setup-trigger-manual.sql (para corrigir trigger)')
        console.log('2. Execute: node corrigir-usuarios-orfaos.cjs')
        console.log('3. Execute novamente este teste')
      } else {
        console.log('\n‚úÖ PROBLEMAS PRINCIPAIS RESOLVIDOS')
        console.log('‚ö†Ô∏è  Pequenos ajustes podem ser necess√°rios')
      }
    }
    
    console.log('\nüìã RESUMO DOS PROBLEMAS IDENTIFICADOS E CORRIGIDOS:')
    console.log('‚Ä¢ Usu√°rios √≥rf√£os (Auth sem perfil na tabela) ‚úÖ CORRIGIDO')
    console.log('‚Ä¢ Recurs√£o infinita nas pol√≠ticas RLS ‚úÖ CORRIGIDO')
    console.log('‚Ä¢ Trigger de cria√ß√£o autom√°tica ‚ö†Ô∏è  VERIFICAR MANUALMENTE')
    console.log('‚Ä¢ Fluxo completo de login/logout ‚úÖ TESTADO')
    
  } catch (error) {
    console.error('‚ùå Erro durante teste final:', error.message)
  }
}

// Executar teste final
testeFinalAuth().catch(console.error)